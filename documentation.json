{
    "pipes": [],
    "interfaces": [
        {
            "name": "ConcentratedDisplayStoryTemplate",
            "id": "interface-ConcentratedDisplayStoryTemplate-63967da255da1c35d40b1849915e34b778158680012ca070fe54ab51e79f52ca34924a5b7d99e9fd99597ceb682993e60fc963d79758a486ab9d27f9c2d71e64",
            "file": "src/stories/models/templates/concentrated-display-story-template.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Direction } from '@stories/models/direction.model';\n\nexport interface ConcentratedDisplayStoryTemplate {\n  args: {\n    direction: Direction;\n    text: any;\n    defaultSettings: any;\n    // resolution: TimelineResolution;\n    // metadata: GraphMetadata;\n    // data: GraphData;\n  }\n}\n",
            "properties": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GraphData",
            "id": "interface-GraphData-3aaec0132a2a3f14724d83fecdfeb5e513275ac539027b7f877748c317ce6bea76b129fa6afeff2f3cec9d8de3ec5f63dbb464cc17d6a70f7007a575979e8c4e",
            "file": "src/app/shared/models/graph-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type GraphSeriesDataLines = Array<{ name: string; data : number[]; }>;\nexport type GraphSeriesDataPie = Array<{ name: string; value : number; }>;\n\nexport interface GraphData {\n  title: {\n    text: string;\n  },\n  legend?: {\n    data: string[];\n  },\n  xAxis?: {\n    data: string[];\n  },\n  series?: {\n    data: GraphSeriesDataLines | GraphSeriesDataPie;\n  }\n}\n",
            "properties": [
                {
                    "name": "legend",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "xAxis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GraphMetadata",
            "id": "interface-GraphMetadata-c68bb289af37c21e79b66d8f6dea00c5f015f7571db100a1e49707cda1279d3bffd545dbad2724eb987ee334220d920617dafe5c6a45dbd657d670ffba1c21ae",
            "file": "src/app/shared/models/graph-metadata.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GraphType } from '../enums/graph-type.enum';\n\nexport interface GraphMetadata {\n  type: GraphType;\n  langDir?: 'lrt' | 'rtl';\n  letterSize?: number;\n  height?: number | string;\n}\n",
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "langDir",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"lrt\" | \"rtl\"",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "letterSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphType",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GraphStoryTemplate",
            "id": "interface-GraphStoryTemplate-3c83ea486fb3cf93025f9cf527884a4330031bfcc6f5237ddff7fd71b94b5f76c7f34725749e7afe9facfd683479ebddba205d2c9fd0e0796572102adf6a0c56",
            "file": "src/stories/models/templates/graph-story-template.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GraphMetadata } from '@models/graph-metadata.model';\nimport { GraphData } from '@models/graph-data.model';\n\nexport interface GraphStoryTemplate {\n  args: {\n    direction?: 'rtl' | 'ltr'\n    metadata: GraphMetadata;\n    data: GraphData;\n  }\n}\n",
            "properties": [
                {
                    "name": "args",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Medication",
            "id": "interface-Medication-6cd4b425bd5973ab139db120d8e48b5864b49065b39732af327e0f1752975ee635e3c45ba333d56dd5d875502020cd8dc16662198aedc0606c089dc95c19b607",
            "file": "src/stories/models/medication.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ExecutionType } from '@stories/enums/execution-type.enum';\n\nexport interface Medication {\n  id: number;\n  name: string;\n  categoryId: number;\n  type: ExecutionType;\n  timingType?: any;\n  orderTime: number;\n  executionTime: number;\n  duration: number;\n  times: string[];\n}\n\n/*\nexport interface BaseMedication {\n  id: number;\n  categoryId: number;\n  type: ExecutionType;\n  timingType?: any;\n}\n\nexport interface MedicationContinuous extends BaseMedication {\n  orderTime: number;\n  executionTime: number;\n  duration: number;\n}\n\nexport interface MedicationPeriodic extends BaseMedication {\n  times: string[];\n}\n\nexport type Medication = MedicationContinuous | MedicationPeriodic;\n*/\n",
            "properties": [
                {
                    "name": "categoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "executionTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "orderTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "times",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "timingType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExecutionType",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MedicationsCategory",
            "id": "interface-MedicationsCategory-e03bbf81b6f11f6f7ea3c853434971533f394ca1284ba2f2571b407f4bab5bf07329fe42dc63f4b20018bb88bdeddadf6139772bb5cd967494c159059cc1e258",
            "file": "src/app/shared/models/medicon-server-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Medication } from '@stories/models/medication.model';\nimport { TimelineResolution } from '@shared/enums/timeline-resolution.enum';\nimport { MediconSectionType } from '@shared/enums/medicon-section-type.enum';\n\nexport interface MediconServerData {\n  pivotTimeGmt: string;\n  tempPivotTimeGmt: string;\n  title: {\n    fromTimeGmt: string;\n    toTimeGmt: string;\n  },\n  resolution: TimelineResolution;\n  sections: MediconSection[],\n  timelineRange: MediconServerTimelineRange\n}\n\nexport interface MediconSection {\n  id: number;\n  type: MediconSectionType;\n  name: string;\n  isDisplay: boolean;\n  categories: MedicationsCategory[];\n}\n\nexport interface MedicationsCategory {\n  id: number;\n  name: string;\n  color: string;\n  medications: Medication[]\n}\n\nexport interface MediconServerTimelineRange {\n  fromTimeGmt: string;  // gmt time of start day\n  toTimeGmt: string;\n  days: number;\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "medications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Medication[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MediconSection",
            "id": "interface-MediconSection-e03bbf81b6f11f6f7ea3c853434971533f394ca1284ba2f2571b407f4bab5bf07329fe42dc63f4b20018bb88bdeddadf6139772bb5cd967494c159059cc1e258",
            "file": "src/app/shared/models/medicon-server-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Medication } from '@stories/models/medication.model';\nimport { TimelineResolution } from '@shared/enums/timeline-resolution.enum';\nimport { MediconSectionType } from '@shared/enums/medicon-section-type.enum';\n\nexport interface MediconServerData {\n  pivotTimeGmt: string;\n  tempPivotTimeGmt: string;\n  title: {\n    fromTimeGmt: string;\n    toTimeGmt: string;\n  },\n  resolution: TimelineResolution;\n  sections: MediconSection[],\n  timelineRange: MediconServerTimelineRange\n}\n\nexport interface MediconSection {\n  id: number;\n  type: MediconSectionType;\n  name: string;\n  isDisplay: boolean;\n  categories: MedicationsCategory[];\n}\n\nexport interface MedicationsCategory {\n  id: number;\n  name: string;\n  color: string;\n  medications: Medication[]\n}\n\nexport interface MediconServerTimelineRange {\n  fromTimeGmt: string;  // gmt time of start day\n  toTimeGmt: string;\n  days: number;\n}\n",
            "properties": [
                {
                    "name": "categories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MedicationsCategory[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediconSectionType",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MediconServerData",
            "id": "interface-MediconServerData-e03bbf81b6f11f6f7ea3c853434971533f394ca1284ba2f2571b407f4bab5bf07329fe42dc63f4b20018bb88bdeddadf6139772bb5cd967494c159059cc1e258",
            "file": "src/app/shared/models/medicon-server-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Medication } from '@stories/models/medication.model';\nimport { TimelineResolution } from '@shared/enums/timeline-resolution.enum';\nimport { MediconSectionType } from '@shared/enums/medicon-section-type.enum';\n\nexport interface MediconServerData {\n  pivotTimeGmt: string;\n  tempPivotTimeGmt: string;\n  title: {\n    fromTimeGmt: string;\n    toTimeGmt: string;\n  },\n  resolution: TimelineResolution;\n  sections: MediconSection[],\n  timelineRange: MediconServerTimelineRange\n}\n\nexport interface MediconSection {\n  id: number;\n  type: MediconSectionType;\n  name: string;\n  isDisplay: boolean;\n  categories: MedicationsCategory[];\n}\n\nexport interface MedicationsCategory {\n  id: number;\n  name: string;\n  color: string;\n  medications: Medication[]\n}\n\nexport interface MediconServerTimelineRange {\n  fromTimeGmt: string;  // gmt time of start day\n  toTimeGmt: string;\n  days: number;\n}\n",
            "properties": [
                {
                    "name": "pivotTimeGmt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "resolution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimelineResolution",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "sections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediconSection[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "tempPivotTimeGmt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "timelineRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediconServerTimelineRange",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MediconServerTimelineRange",
            "id": "interface-MediconServerTimelineRange-e03bbf81b6f11f6f7ea3c853434971533f394ca1284ba2f2571b407f4bab5bf07329fe42dc63f4b20018bb88bdeddadf6139772bb5cd967494c159059cc1e258",
            "file": "src/app/shared/models/medicon-server-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Medication } from '@stories/models/medication.model';\nimport { TimelineResolution } from '@shared/enums/timeline-resolution.enum';\nimport { MediconSectionType } from '@shared/enums/medicon-section-type.enum';\n\nexport interface MediconServerData {\n  pivotTimeGmt: string;\n  tempPivotTimeGmt: string;\n  title: {\n    fromTimeGmt: string;\n    toTimeGmt: string;\n  },\n  resolution: TimelineResolution;\n  sections: MediconSection[],\n  timelineRange: MediconServerTimelineRange\n}\n\nexport interface MediconSection {\n  id: number;\n  type: MediconSectionType;\n  name: string;\n  isDisplay: boolean;\n  categories: MedicationsCategory[];\n}\n\nexport interface MedicationsCategory {\n  id: number;\n  name: string;\n  color: string;\n  medications: Medication[]\n}\n\nexport interface MediconServerTimelineRange {\n  fromTimeGmt: string;  // gmt time of start day\n  toTimeGmt: string;\n  days: number;\n}\n",
            "properties": [
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "fromTimeGmt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "toTimeGmt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MediconTimelineMetrics",
            "id": "interface-MediconTimelineMetrics-b53ac677d750828135c03c3fc67130c9c9c1febb0ab59c6db84d730f7a96382dc8f34a2ec3da83f52da2557a367fb3f563ce9355a68c1433466a280af871aaf1",
            "file": "src/app/shared/models/timeline-metrics.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MediconTimelineMetrics {\n  // total range - the entire scroll, including filler\n  // data range - only the range that is coming from the server\n  // window range - the visible portion\n  total: {\n    fromEpoch: number;\n    toEpoch: number;\n    width: number;\n    fillerWidth: number;\n    rangeMs: number;\n  },\n  data: {\n    fromEpoch: number;\n    toEpoch: number;\n    columns: number;\n  },\n  window: {\n    width: number;\n    rangeMs: number;\n  },\n  // fromEpoch: number;\n  // toEpoch: number;\n  columnMs: number;\n  // xAxisValues: string[];\n  interval: number;\n  // timelineWidth: number;\n  // fullWidth: number;\n  hardVerticalWidth: number;\n  hardVerticalWidthStyle: string;\n  softVerticalWidthStyle: string;\n  xAxisValueWidth: number;\n  scrollX: number;\n  pivotEpoch: number;\n  pivotX: number;\n}\n",
            "properties": [
                {
                    "name": "columnMs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "hardVerticalWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "hardVerticalWidthStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "interval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "pivotEpoch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "pivotX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "scrollX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "softVerticalWidthStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "window",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "xAxisValueWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Settings",
            "id": "interface-Settings-5916f627008c5bfa6d33c3893ce7decfd88cd93a5e566439b23460068f824e74ea8f3da113e495716eeef20657deb010e0bf5ceb3192a0552961a9c737582ed7",
            "file": "src/stories/models/settings.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Medication } from '@stories/models/medication.model';\nimport { TimelineResolution } from '@shared/enums/timeline-resolution.enum';\nimport { MediconSectionType } from '@shared/enums/medicon-section-type.enum';\n\nexport interface Settings {\n  languageCode: string;\n  resolution: TimelineResolution;\n  pivotTime: string;\n  hoursForward: number;\n  hoursBackward: number;\n  refreshTime: number;\n  locale: string;\n  sections: [{\n    isDisplay: boolean;\n    type: MediconSectionType,\n    medications: Medication[]\n  }];\n}\n",
            "properties": [
                {
                    "name": "hoursBackward",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "hoursForward",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "languageCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "pivotTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "refreshTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "resolution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimelineResolution",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "sections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[literal type]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/app/shared/models/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "MediconService",
            "id": "injectable-MediconService-e06506171897afbc4d4854eb8049e0224cd7fa2827cd19bebcaaef0e975b24149c2ff995c7bf440ccbba09e198ffea7531c9eda23999bcd8a5d35c6d72183e4b",
            "file": "src/app/shared/components/system/shared/services/medicon.service.ts",
            "properties": [
                {
                    "name": "elGraphAreaWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isPivotMiddle",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "pivotTime$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "resolution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimelineResolution",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "resolution$",
                    "defaultValue": "new ReplaySubject<TimelineResolution>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "scroll$",
                    "defaultValue": "new ReplaySubject<boolean>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "scrollCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "serverData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediconServerData",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "timelineMetrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediconTimelineMetrics",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "timelineMetrics$",
                    "defaultValue": "new ReplaySubject<MediconTimelineMetrics>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "WINDOW_COLUMNS",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "xAxisValues$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [
                {
                    "name": "epochToX",
                    "args": [
                        {
                            "name": "epoch",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "epoch",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPivotEpoch",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getScrollXByEpoch",
                    "args": [
                        {
                            "name": "epoch",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "epoch",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWindowMiddleEpoch",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "serverData",
                            "type": "MediconServerData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "elGraphAreaWidth",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serverData",
                            "type": "MediconServerData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "elGraphAreaWidth",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "msToWidth",
                    "args": [
                        {
                            "name": "ms",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onScrollTimeline",
                    "args": [
                        {
                            "name": "scrollX",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isScrolledByUser",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n/",
                    "description": "<p>/</p>\n",
                    "jsdoctags": [
                        {
                            "name": "scrollX",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isScrolledByUser",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollToPivot",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setResolution",
                    "args": [
                        {
                            "name": "resolution",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isInit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "resolution",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isInit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTimelineMetrics",
                    "args": [
                        {
                            "name": "resolution",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isInit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n/",
                    "description": "<p>/</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "resolution",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isInit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setXAxisValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MediconServerData } from '@models/medicon-server-data.model';\nimport { TimelineResolutionValues } from '@shared/consts/timeline-resolution-values.const';\nimport { ReplaySubject } from 'rxjs';\nimport { TimelineResolution } from '@shared/enums/timeline-resolution.enum';\nimport { TimeService } from '@shared/services/time.service';\nimport { MediconTimelineMetrics } from '@models/timeline-metrics.model';\n\n@Injectable()\nexport class MediconService {\n  readonly WINDOW_COLUMNS = 12;\n  serverData: MediconServerData;\n  timelineMetrics: MediconTimelineMetrics;\n  timelineMetrics$ = new ReplaySubject<MediconTimelineMetrics>(1);\n  resolution: TimelineResolution;\n  resolution$ = new ReplaySubject<TimelineResolution>(1);\n  elGraphAreaWidth;\n  xAxisValues$ = new ReplaySubject(1);\n  pivotTime$ = new ReplaySubject(1);\n  scroll$ = new ReplaySubject<boolean>(1);\n  scrollCount = 0;\n  isPivotMiddle = true;\n\n  constructor(private timeService: TimeService) {}\n\n  init(serverData: MediconServerData, elGraphAreaWidth) {\n    this.elGraphAreaWidth = elGraphAreaWidth;\n    this.serverData = serverData;\n    this.setResolution(this.serverData.resolution, true);\n  }\n\n  setResolution(resolution, isInit = false) {\n    this.resolution = resolution;\n    this.setTimelineMetrics(resolution, isInit);\n    this.resolution$.next(resolution);\n  }\n\n  /*****************************************/\n  /*    T I M E L I N E   M E T R I C S    */\n  /*****************************************/\n\n  private setTimelineMetrics(resolution, isInit = false) {\n    const item = TimelineResolutionValues[resolution];\n    const windowMiddleEpoch = this.isPivotMiddle ? this.getPivotEpoch() : this.getWindowMiddleEpoch();\nconsole.log('curr - resolution:', this.resolution, ', middle:', windowMiddleEpoch);\n    // epoch / ms\n    const totalFromEpoch =  this.timeService.gmtToEpoch(this.serverData.timelineRange.fromTimeGmt);\n    const dataToEpoch = this.timeService.gmtToEpoch(this.serverData.timelineRange.toTimeGmt);\n    const dataRangeInMs = dataToEpoch - totalFromEpoch;\n    const columnMs = item.minutes * 60000;\n    const dataColumns = dataRangeInMs / columnMs;\n\n    // width\n    const windowWidth = this.elGraphAreaWidth;\n    const hardVerticalWidth = windowWidth / this.WINDOW_COLUMNS;\n    const hardVerticalWidthStyle = hardVerticalWidth + 'px 100%';\n    const totalLColumns = dataColumns + (item.fillerColumns ?? 0);\n    const totalWidth = totalLColumns * hardVerticalWidth;\n    const softVerticalWidthStyle = hardVerticalWidth / item.softVerticals + 'px 100%';\n    const fillerWidth = totalWidth - (dataColumns * hardVerticalWidth);\n    const totalRangeMs = totalLColumns * columnMs;\n    const totalToEpoch = totalFromEpoch + totalRangeMs;\n\n    // pivot\n    const pivotEpoch = this.getPivotEpoch();\n    const pivotMs = pivotEpoch - totalFromEpoch;\n    const pivotPct = pivotMs / totalRangeMs;\n    const pivotX = pivotPct * totalWidth;\n\n    this.timelineMetrics = {\n      total: {\n        fromEpoch: totalFromEpoch,\n        toEpoch: totalToEpoch,\n        width: totalWidth,\n        fillerWidth,\n        rangeMs: totalRangeMs\n      },\n      data: {\n        fromEpoch: totalFromEpoch,\n        toEpoch: dataToEpoch,\n        columns: dataColumns\n      },\n      window: {\n        width: windowWidth,\n        rangeMs: columnMs * this.WINDOW_COLUMNS\n      },\n\n\n      // fromEpoch: this.timeService.gmtToEpoch(this.serverData.timelineRange.fromTimeGmt),\n      // toEpoch: this.timeService.gmtToEpoch(this.serverData.timelineRange.toTimeGmt),\n      columnMs,\n      // xAxisValues: this.getXAxisValues(resolution, totalFromEpoch, totalToEpoch, this.serverData.timelineRange.days),\n      interval: item.interval,\n      // timelineWidth,\n      // fullWidth,\n      hardVerticalWidth,\n      hardVerticalWidthStyle,\n      softVerticalWidthStyle,\n      xAxisValueWidth: hardVerticalWidth * item.interval,\n      scrollX: 0,\n      pivotEpoch,\n      pivotX\n    }\n\n    this.timelineMetrics.scrollX = this.getScrollXByEpoch(windowMiddleEpoch);\n    this.scrollCount = 0;\n    this.timelineMetrics$.next(this.timelineMetrics);\n  }\n\n  getWindowMiddleEpoch() {\n    const prevScrollFromX = this.timelineMetrics.scrollX;\n    const windowStartEpoch = this.timelineMetrics.total.fromEpoch + (prevScrollFromX / this.timelineMetrics.total.width) * this.timelineMetrics.total.rangeMs;\n    return windowStartEpoch + this.timelineMetrics.window.rangeMs / 2;\n  }\n\n  getPivotEpoch() {\n    return this.timeService.gmtToEpoch(this.serverData.pivotTimeGmt);\n  }\n\n  getScrollXByEpoch(epoch) {\n    const middleX = this.epochToX(epoch);\n    const halfWindowWidth = this.timelineMetrics.window.width / 2;\n    let startX = middleX - (halfWindowWidth);\n    const endX = middleX + (halfWindowWidth);\n    const totalWidth = this.timelineMetrics.total.width;\n    if (endX > totalWidth) startX -= (endX - totalWidth);\n    if (startX < 0) startX = 0;\n    return startX;\n  }\n\n  epochToX(epoch) {\n    const pct = (epoch - this.timelineMetrics.total.fromEpoch) / this.timelineMetrics.total.rangeMs;\n    return pct * this.timelineMetrics.total.width;\n  }\n\n  msToWidth(ms) {\n    return (ms / this.timelineMetrics.total.rangeMs) * this.timelineMetrics.total.width;\n  }\n\n  /*************************/\n  /*      S C R O L L      */\n  /*************************/\n\n  onScrollTimeline(scrollX, isScrolledByUser) {\n    if (isScrolledByUser) {\n      this.isPivotMiddle = false;\n      this.timelineMetrics.scrollX = scrollX;\n    }\n    if (this.scrollCount++) this.scroll$.next(false);\n    this.setXAxisValues();\n  }\n\n  scrollToPivot() {\n    const pivotEpoch = this.getPivotEpoch();\n    this.timelineMetrics.scrollX = this.getScrollXByEpoch(pivotEpoch);\n    this.scrollCount = 0;\n    this.scroll$.next(true);\n    this.setXAxisValues();\n  }\n\n  setXAxisValues() {\n    const metrics = this.timelineMetrics;\n    const startPct = Math.max(0, metrics.scrollX / metrics.total.width);\n\n// const endPct = Math.min(1, (metrics.scrollX + this.SCROLL_SAFE_TEXT_MARGIN + metrics.window.width) / metrics.total.width);\n// console.log('start/end:', (startPct * 100).toFixed(0) + '%', '/', (endPct * 100).toFixed(0) + '%');\n// console.log('total from/to epoch:', metrics.total.fromEpoch, '/', metrics.total.toEpoch);\n\n    const startEpoch = metrics.total.fromEpoch + Math.round(startPct * metrics.total.rangeMs);\n    const localStartEpoch = this.timeService.getLocalEpoch(startEpoch);\n    const item = TimelineResolutionValues[this.resolution];\n    const xAxisColumnMs = metrics.columnMs * item.interval;\n    const utcStartHardVerticalEpoch = Math.floor(localStartEpoch / xAxisColumnMs) * xAxisColumnMs;\n    const startColumn = Math.floor((utcStartHardVerticalEpoch - this.timeService.getLocalEpoch(metrics.total.fromEpoch)) / metrics.columnMs);\n    const endColumn = Math.min(startColumn + this.WINDOW_COLUMNS + item.interval, metrics.data.columns);\n    const xAxisColumns = endColumn - startColumn;\n    const utcEndHardVerticalEpoch = utcStartHardVerticalEpoch + xAxisColumns * metrics.columnMs;\n    let left = startColumn * metrics.hardVerticalWidth - 0.5 * metrics.xAxisValueWidth;\n    // const adv = metrics.columnMs * item.interval;\n    const values = [];\n    for (let epoch = utcStartHardVerticalEpoch; epoch <= utcEndHardVerticalEpoch; epoch += xAxisColumnMs) {\n      const value = this.timeService.getFormattedTime(item.type, this.timeService.getUtcEpoch(epoch));\n      values.push({ value, left, width: metrics.xAxisValueWidth });\n      left += metrics.xAxisValueWidth;\n    }\n    // console.log('columns:', `${startColumn}-${endColumn}`, ', values:', values[0].value, '-', values[values.length - 1].value);\n    this.xAxisValues$.next(values);\n  }\n\n  /*\n  getXAxisValues(resolution, totalFromEpoch, totalToEpoch, days) {\n    // let epoch = this.timeService.gmtToEpoch(this.serverData.timelineRange.range.fromTimeGmt);\n    console.log('server fromTimeGmt:', this.serverData.timelineRange.fromTimeGmt);\n    let d = new Date(this.serverData.timelineRange.fromTimeGmt.substring(0, 10));\n    console.log('d:', d.toISOString());\n    let startEpoch = d.getTime();\n    console.log('startEpoch:', startEpoch);\n    console.time('getXAxisValues');\n    const item = TimelineResolutionValues[resolution];\n    const totalRangeInMs = this.serverData.timelineRange.days * 1440 * 60000;\n    const endEpoch = startEpoch + totalRangeInMs;\n    const adv = item.minutes * 60000;\n    const values = [];\n    let interval = 0;\n    for (let epoch = startEpoch; epoch <= endEpoch; epoch += adv) {\n      // if (item.type !== TimeDisplayType.DateTime || ++interval % 2 !== 0) {\n      //   values.push(this.timeService.getFormattedTime(item.type, epoch));\n      // }\n      // values.push('TL' + i + 1);\n      // const time = (new Date(epoch)).toISOString();\n      // values.push(time);\n    }\n    console.timeEnd('getXAxisValues');\n    return values;\n\n    // const pivotEpoch = this.timeService.getMidnightEpoch(this.serverData.timeline.pivotTime.iso.substring(11, 16));\n    // const roundBy = 60000 * item.minutes;\n    // const roundedPivotEpoch = pivotEpoch - (pivotEpoch % roundBy);\n    // const roundedPivotLocalEpoch = this.timeService.getLocalEpoch(roundedPivotEpoch);\n    // const tlStartEpoch = roundedPivotLocalEpoch - (6 * roundBy);\n    // const elEndEpoch = roundedPivotLocalEpoch + (6 * roundBy);\n    // const values = [];\n    // let interval = 0;\n    // for (let time = tlStartEpoch; time <= elEndEpoch; time += roundBy) {\n    //   if (item.type !== TimeDisplayType.DateTime || ++interval % 2 !== 0) {\n    //     values.push(this.timeService.getFormattedTime(item.type, time));\n    //   }\n    // }\n  }\n  */\n\n  // getTimeline(): MediconTimelineRange {\n  //   const item = TimelineResolutionValues[this.settings.resolution];\n  //   const pivotEpoch = this.timeService.getMidnightEpoch(this.settings.pivotTime);\n  //   const roundBy = 60000 * item.minutes;\n  //   const roundedPivotEpoch = pivotEpoch - (pivotEpoch % roundBy);\n  //   const roundedPivotLocalEpoch = this.timeService.getLocalEpoch(roundedPivotEpoch);\n  //   const tlStartEpoch = roundedPivotLocalEpoch - (6 * roundBy);\n  //   const elEndEpoch = roundedPivotLocalEpoch + (6 * roundBy);\n  //   const values = [];\n  //   let interval = 0;\n  //   for (let time = tlStartEpoch; time <= elEndEpoch; time += roundBy) {\n  //     if (item.type !== TimeDisplayType.DateTime || ++interval % 2 !== 0) {\n  //       values.push(this.timeService.getFormattedTime(item.type, time));\n  //     }\n  //   }\n  //   return {\n  //     pivotTime: {\n  //       epoch: this.timeService.getLocalEpoch(pivotEpoch),\n  //       iso: this.timeService.getLocalIso(pivotEpoch)\n  //     },\n  //     range: {\n  //       fromTimeGmt: values[0],\n  //       fromTimeEpoch: tlStartEpoch,\n  //       toTimeGmt: values[12],\n  //       toTimeEpoch: elEndEpoch\n  //     },\n  //     xAxisValues: values,\n  //     subDivision: item.subDivision,\n  //     interval: item.interval,\n  //     days: 12\n  //   }\n  // }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "timeService",
                        "type": "TimeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "timeService",
                        "type": "TimeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TimeService",
            "id": "injectable-TimeService-caacf651ba37d27cb16646093126c2c34e87595fa1faadc49e88b8851df7454d0da3862bbcf2d01ece0ed5b2d09e7e03ff716dec308db8ba7b251fa279243569",
            "file": "src/app/shared/services/time.service.ts",
            "properties": [
                {
                    "name": "locale",
                    "defaultValue": "'he-il'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "ONE_DAY_IN_MS",
                    "defaultValue": "86400000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "ONE_HOUR_IN_MS",
                    "defaultValue": "3600000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "TimeFormatOptions",
                    "defaultValue": "{\n    date: { year: '2-digit', month: '2-digit', day: 'numeric' } as const,\n    time: { hour: '2-digit', minute: '2-digit' } as const,\n    dateTime: { year: '2-digit', month: '2-digit', day: 'numeric', hour: '2-digit', minute: '2-digit' } as const\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "epochToGmt",
                    "args": [
                        {
                            "name": "epoch",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "epoch",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "epochToLocalGmt",
                    "args": [
                        {
                            "name": "epoch",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "epoch",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "epochToLocalIso",
                    "args": [
                        {
                            "name": "epoch",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "epoch",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrUtcEpoch",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFormattedTime",
                    "args": [
                        {
                            "name": "type",
                            "type": "TimeDisplayType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "epoch",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "TimeDisplayType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "epoch",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLocalEpoch",
                    "args": [
                        {
                            "name": "epoch",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "epoch",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUtcEpoch",
                    "args": [
                        {
                            "name": "epoch",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "epoch",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getZoneOffsetInMs",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "gmtToEpoch",
                    "args": [
                        {
                            "name": "gmt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gmt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "gmtToLocalEpoch",
                    "args": [
                        {
                            "name": "gmt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gmt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { TimeDisplayType } from '@shared/enums/time-display-type.enum';\nimport * as dayjs from 'dayjs';\n\n@Injectable({ providedIn: 'root' })\nexport class TimeService {\n  readonly ONE_HOUR_IN_MS = 3600000; // 1000 * 60 * 60\n  readonly ONE_DAY_IN_MS = 86400000; // 1000 * 60 * 60 * 24\n  readonly TimeFormatOptions = {\n    date: { year: '2-digit', month: '2-digit', day: 'numeric' } as const,\n    time: { hour: '2-digit', minute: '2-digit' } as const,\n    dateTime: { year: '2-digit', month: '2-digit', day: 'numeric', hour: '2-digit', minute: '2-digit' } as const\n  }\n  locale = 'he-il';\n\n  getLocalEpoch(epoch: number) {\n    return epoch - this.getZoneOffsetInMs();\n  }\n\n  getUtcEpoch(epoch: number) {\n    return epoch + this.getZoneOffsetInMs();\n  }\n\n  epochToLocalIso(epoch: number) {\n    return (new Date(this.getLocalEpoch(epoch))).toISOString();\n  }\n\n  epochToLocalGmt(epoch: number) {\n    // return (new Date(this.getLocalEpoch(epoch))).toISOString();\n    return dayjs(this.getLocalEpoch(epoch)).format('YYYY-MM-DDTHH:mm:ss[Z]Z');\n  }\n\n  epochToGmt(epoch: number) {\n    // return (new Date(this.getLocalEpoch(epoch))).toISOString();\n    return dayjs(epoch).format('YYYY-MM-DDTHH:mm:ssZ');\n  }\n\n  getFormattedTime(type: TimeDisplayType, epoch: number) {\n    const date = new Date(epoch);\n    switch(type) {\n      case TimeDisplayType.Time:\n        // return date.toLocaleTimeString(this.locale, this.TimeFormatOptions.time);\n        return dayjs(epoch).format('HH:mm');\n      case TimeDisplayType.Date:\n        // return date.toLocaleDateString(this.locale, this.TimeFormatOptions.date);\n        return dayjs(epoch).format('D/M/YY');\n      case TimeDisplayType.DateTime:\n        return dayjs(epoch).format('D/M/YY HH:mm');\n        // const isoTime = date.toLocaleString(this.locale, this.TimeFormatOptions.dateTime);\n        // return isoTime.substring(0, 8) + ' ' + isoTime.substring(10, 15);\n    }\n  }\n\n  gmtToEpoch(gmt) {\n    return dayjs(gmt).valueOf();\n  }\n\n  gmtToLocalEpoch(gmt) {\n    return this.getLocalEpoch(dayjs(gmt).valueOf());\n  }\n\n  getZoneOffsetInMs() {\n    return (new Date()).getTimezoneOffset() * 60000;\n  }\n\n  getCurrUtcEpoch() {\n    return Date.now();\n  }\n\n}\n",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "BaseHorizontalBar",
            "id": "class-BaseHorizontalBar-49f6bfec860975050b0df88ab38a722867c38a0c7922b12a049ac10b7592d4fbcf40575c2c4f0b6da8dbab930e00da39fef9a50a85a1c37827f3192d75c0d9de",
            "file": "src/app/shared/base-classes/base-horizontal-bar.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class BaseHorizontalBar {\n  readonly FONT_STYLE = 'Rubik';\n  readonly SPLIT_LINE_COLOR = '#eff1f4';\n  readonly BORDER_RADIUS = 10;\n  options;\n\n  setOptions(labels, values, colors) {\n    this.options = this.getOptions(labels, values, colors);\n  }\n\n  getOptions(labels, values, colors) {\n    const options: any = {\n      // title: this.getTitle(title),\n      series: this.getSeries(labels, values, colors),\n      xAxis: this.getXAxis(),\n      yAxis: this.getYAxis(labels),\n      tooltip: this.getTooltip(),\n      grid: {\n        top: '50',\n        bottom: '30',\n        left: '70',\n        right: '25'\n      }\n    };\n    return options;\n  }\n\n  getSeries(labels, values, colors) {\n    return [{\n      type: 'bar',\n      data: values.map((value, i) => ({ value, itemStyle: this.getItemStyle(colors[i]) })),\n      label: {\n        show: false\n      },\n      labelLine: {\n        show: true\n      },\n      barWidth: 13,\n      showBackground: true,\n      backgroundStyle: {\n        color: '#f6f6f7',\n        borderRadius: this.BORDER_RADIUS\n      }\n    }];\n  }\n\n  getXAxis() {\n    return {\n      max: 'dataMax',\n      splitLine: {\n        show: false\n      }\n    };\n  }\n\n  getYAxis(labels) {\n    return {\n      position: 'left',\n      inverse: true,\n      axisLine: {\n        show: false\n      },\n      axisTick: {\n        show: false\n      },\n      splitLine: {  // lines between bars\n        show: true,\n        lineStyle: {\n          color: this.SPLIT_LINE_COLOR\n        }\n      },\n      axisLabel: {\n        margin: 16\n      },\n      type: 'category',\n      data: labels,\n    };\n  }\n\n  getTooltip() {\n    return {\n      trigger: 'item',\n      // formatter: params => `${params.name} ${params.value}`\n      formatter: params => `${params.value}`\n    };\n  }\n\n  getTitle(title) {\n    return title ?  { text: title } : undefined;\n  }\n\n  getItemStyle(color) {\n    return { color, borderRadius: this.BORDER_RADIUS };\n  }\n}\n",
            "properties": [
                {
                    "name": "BORDER_RADIUS",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "FONT_STYLE",
                    "defaultValue": "'Rubik'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "SPLIT_LINE_COLOR",
                    "defaultValue": "'#eff1f4'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getItemStyle",
                    "args": [
                        {
                            "name": "color",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ color: any; borderRadius: number; }",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOptions",
                    "args": [
                        {
                            "name": "labels",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "values",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colors",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "labels",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colors",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSeries",
                    "args": [
                        {
                            "name": "labels",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "values",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colors",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "labels",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colors",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTitle",
                    "args": [
                        {
                            "name": "title",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ text: any; }",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "{ trigger: string; formatter: (params: any) => string; }",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getXAxis",
                    "args": [],
                    "optional": false,
                    "returnType": "{ max: string; splitLine: { show: boolean; }; }",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getYAxis",
                    "args": [
                        {
                            "name": "labels",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ position: string; inverse: boolean; axisLine: { show: boolean; }; axisTick: { show: boolean; }; splitLine: { show: boolean; lineStyle: { color: string; }; }; axisLabel: { margin: number; }; type: string; data: any; }",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "labels",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOptions",
                    "args": [
                        {
                            "name": "labels",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "values",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colors",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "labels",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colors",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "BaseGraph",
            "id": "directive-BaseGraph-f903d43c582a0f19c30ecd789d30955a512197e1b2a12df9a8c29901944e5527f6d9838513a0d5562d798cdd5b2212945717c5d38d99716d0db611fc8d02d8f3",
            "file": "src/app/shared/base-classes/base-graph.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { GraphMetadata } from '@models/graph-metadata.model';\nimport { GraphData } from '@models/graph-data.model';\nimport * as echarts from 'echarts';\nimport { TitleComponentOption } from 'echarts/types/dist/echarts';\nimport { AfterViewInit, ChangeDetectorRef, Directive, ElementRef, Input, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\ntype EChartsOption = echarts.EChartsOption;\n// import { axis } from 'echarts/types/dist/echarts';\n// import { XAXisOption } from 'echarts';\n\n@Directive()\nexport abstract class BaseGraph implements OnInit, AfterViewInit {\n  @ViewChild('graphContainer') elRefGraphContainer: ElementRef;\n  @ViewChild('graph') elRefGraph: ElementRef;\n  @Input() metadata: GraphMetadata;\n  @Input() data: GraphData;\n  readonly FONT_STYLE = 'Rubik';\n  readonly SPLIT_LINE_COLOR = '#eff1f4';\n  readonly BORDER_RADIUS = 10;\n  options: echarts.EChartsOption;\n  graph;\n  height;\n\n  protected constructor(private cdr: ChangeDetectorRef, private vcr: ViewContainerRef) {}\n\n  ngOnInit() {\n    this.setGraphHeight();\n    this.options = this.getOptions();\n  }\n\n  ngAfterViewInit() {\n    // const echart = echarts.init(this.elRefGraph.nativeElement);\n    // echart.on('finished', () => {\n    //   console.log('finished ===>');\n    //   // this.setGraphHeight()\n    // });\n    // this.cdr.detectChanges();\n    // this.isAfterViewInit = true;\n\n    // setTimeout(() => this.setGraphHeight(), 0);\n\n  }\n\n  getOptions() {\n    const options: any = {\n      title: this.getTitle(),\n      legend: this.getLegend(),\n      series: this.getSeries(),\n      xAxis: this.getXAxis(),\n      yAxis: this.getYAxis(),\n      tooltip: this.getTooltip(),\n      // grid: this.getGrid(),\n      // height: this.setGraphHeight(),\n      // responsive: true,\n      // maintainAspectRatio: false\n      // radius: [300, 300]\n    };\n    return options;\n  }\n\n  abstract getLegend(): echarts.LegendComponentOption;\n  abstract getSeries(): echarts.LinesSeriesOption['data'] | echarts.PieSeriesOption;\n  abstract getXAxis(): echarts.XAXisComponentOption;\n  abstract getYAxis(): echarts.YAXisComponentOption;\n  abstract getTooltip(): echarts.TooltipComponentOption;\n\n  getTitle(): TitleComponentOption {\n    return this.data.title;\n  }\n\n  getGrid(): echarts.GridComponentOption {\n    return { top: '0', bottom: '0', left: '0', right: '0', containLabel: false }\n  }\n\n  setGraphHeight() {\n    let height;\n    if (typeof this.metadata.height === 'number') {\n      if (this.metadata.height > 0) height = this.metadata.height + 'px';\n    } else if (typeof this.metadata.height === 'string') {\n      if (this.metadata.height !== '100%') {\n        height = this.metadata.height + (this.metadata.height.endsWith('px') ? '' : 'px');\n      }\n    }\n\n//     const printEl = (el, msg) => {\n//       console.log(msg);\n//       console.log('====================================');\n//       // const el = this.elRefGraphContainer.nativeElement;\n//       console.log(el);\n//       const clientHeight = el.clientHeight;\n//       const offsetHeight = el.offsetHeight;\n//       const rect = el.getBoundingClientRect();\n//       const computed = document.defaultView.getComputedStyle(el).height;\n//       const currentStyle = el.currentStyle;\n// console.log('clientHeight:', clientHeight);\n// console.log('offsetHeight:', offsetHeight);\n// console.log('rect:', rect);\n// console.log('computed:', computed);\n// console.log('currentStyle:', currentStyle);\n//     }\n\n    // const el = this.elRefGraphContainer.nativeElement;\n    // printEl(el, 'Element')\n    // const parent1 = el.parentElement;\n    // printEl(parent1, 'parent1')\n    // const parent2 = parent1.parentElement;\n    // printEl(parent2, 'parent2')\n// debugger;\n\n    // console.log('vr:', this.vcr);\n    // console.log('element:', this.vcr.element);\n    // console.log('el:', this.vcr.element.nativeElement);\n    // console.log('height:', height, this.metadata.height);\n\n    this.height = height;\n    return height;\n  }\n  //\n  // getItemStyle(color) {\n  //   return { color, borderRadius: this.BORDER_RADIUS };\n  // }\n}\n",
            "providers": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "GraphData",
                    "decorators": []
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "GraphMetadata",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "BORDER_RADIUS",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "elRefGraph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'graph'"
                        }
                    ]
                },
                {
                    "name": "elRefGraphContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'graphContainer'"
                        }
                    ]
                },
                {
                    "name": "FONT_STYLE",
                    "defaultValue": "'Rubik'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "graph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "echarts.EChartsOption",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "SPLIT_LINE_COLOR",
                    "defaultValue": "'#eff1f4'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getGrid",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.GridComponentOption",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLegend",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.LegendComponentOption",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "getOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSeries",
                    "args": [],
                    "optional": false,
                    "returnType": " | echarts.PieSeriesOption",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "getTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "TitleComponentOption",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.TooltipComponentOption",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "getXAxis",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.XAXisComponentOption",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "getYAxis",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.YAXisComponentOption",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setGraphHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "vcr",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "modifierKind": [
                    122
                ],
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vcr",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-1e5225d017c4a89b9b363417fcde4f459eb2984520a6f56aa7d69faafe53f63eff3638a4b6db6753ee1b042a9fe4862b5ae83489fc196e4f214ad677cc169837",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "graphType",
                    "defaultValue": "GraphType.LinesRegular",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "GraphType",
                    "defaultValue": "GraphType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "mockDataGraphLines",
                    "defaultValue": "mockDataGraphLines",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "mockDataGraphPie",
                    "defaultValue": "mockDataGraphPie",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "defaultValue": "'storybook'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { mockDataGraphLines } from '@stories/mock-data/mock-data-graph-lines.const';\nimport { mockDataGraphPie } from '@stories/mock-data/mock-data-graph-pie.const';\nimport { GraphType } from '@shared/enums/graph-type.enum';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  GraphType = GraphType;\n  title = 'storybook';\n  graphType = GraphType.LinesRegular;\n  mockDataGraphLines = mockDataGraphLines;\n  mockDataGraphPie = mockDataGraphPie;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".buttons {\n  margin: 10px;\n  button {\n    background: #1ea7fd;\n    outline: none;\n    border: none;\n    margin: 20px 20px 30px 20px;\n    width: 100px;\n    height: 30px;\n    cursor: pointer;\n  }\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "\n<div class=\"buttons\">\n  <button (click)=\"graphType=GraphType.LinesRegular\">Linear</button>\n  <button (click)=\"graphType=GraphType.PieRegular\">Pie</button>\n</div>\n\n<div style=\"background: white; display: block; height: 600px\">\n  <app-graph-lines *ngIf=\"graphType===GraphType.LinesRegular\"\n    [data]=\"mockDataGraphLines.data\"\n    [metadata]=\"mockDataGraphLines.metadata\">\n  </app-graph-lines>\n\n  <app-graph-pie *ngIf=\"graphType===GraphType.PieRegular\"\n    [data]=\"mockDataGraphPie.data\"\n    [metadata]=\"mockDataGraphPie.metadata\">\n  </app-graph-pie>\n</div>\n\n\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-0c45767d411d0e0d81cc2098002dfc1f76507a88eb7925db40d3ca40a44eaf28d46f220e25367ed39cda9b86bfdd16d373ef5c1f170fd4947f648e48d86a573b",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "GraphLinesComponent",
            "id": "component-GraphLinesComponent-892b3c7733cc6c8d66690a941523aee7ea2d0bb251d8217129d7e2dc48ba9413c82e184a33dc2042f67d85d7a2d0edf7538961899ad716d122fcec2bab9ed52e",
            "file": "src/app/shared/components/graphs/graph-lines.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-graph-lines",
            "styleUrls": [],
            "styles": [],
            "template": "<div *ngIf=\"options\" #graph echarts class=\"graph-container\" [options]=\"options\" [ngStyle]=\"{height}\" (chartClick)=\"onGraphEvent($event)\"></div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "GraphData",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "GraphMetadata",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "BORDER_RADIUS",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "elRefGraph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'graph'"
                        }
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "elRefGraphContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'graphContainer'"
                        }
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "FONT_STYLE",
                    "defaultValue": "'Rubik'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "graph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "echarts.EChartsOption",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "SPLIT_LINE_COLOR",
                    "defaultValue": "'#eff1f4'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getLegend",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.LegendComponentOption",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getSeries",
                    "args": [],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.TooltipComponentOption",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getXAxis",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.XAXisComponentOption",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getYAxis",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.YAXisComponentOption",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "onGraphEvent",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGrid",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.GridComponentOption",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "TitleComponentOption",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "setGraphHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, ViewContainerRef } from '@angular/core';\nimport { BaseGraph } from '../../base-classes/base-graph';\nimport * as echarts from 'echarts';\n\n@Component({\n  selector: 'app-graph-lines',\n  template: `<div *ngIf=\"options\" #graph echarts class=\"graph-container\" [options]=\"options\" [ngStyle]=\"{height}\" (chartClick)=\"onGraphEvent($event)\"></div>`\n})\nexport class GraphLinesComponent extends BaseGraph {\n  constructor(cdr: ChangeDetectorRef, vcr: ViewContainerRef) {\n    super(cdr, vcr);\n  }\n\n  getTooltip(): echarts.TooltipComponentOption {\n    return { trigger: 'axis' };\n  }\n  getLegend(): echarts.LegendComponentOption {\n    return this.data.legend;\n  }\n\n  getSeries(): echarts.LinesSeriesOption['data'] {\n    return this.data.series.data.map(item => ({ ...item, type: 'line', stack: 'Total' }));\n  }\n\n  override getXAxis(): echarts.XAXisComponentOption {\n    return {\n      type: 'category',\n      boundaryGap: false,\n      data: this.data.xAxis.data\n    };\n  }\n\n  override getYAxis(): echarts.YAXisComponentOption {\n    return {\n      type: 'value'\n    };\n  }\n\n  onGraphEvent(e) {\n    console.log(e);\n    const str = `line: ${e.seriesName}, column: ${e.name}, value: ${e.value}`;\n    alert(str);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "vcr",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vcr",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseGraph"
        },
        {
            "name": "GraphPieComponent",
            "id": "component-GraphPieComponent-b5c5db65f9b00b00d67f7c5cb0b4fc6c4dfe36cb9e6aa1b011312cd55450704aaf1dc74d2c2f9f26cacc7134d5f7faaf94b266c6610ee6e03ce36d343de9ccc6",
            "file": "src/app/shared/components/graphs/graph-pie.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-graph-pie",
            "styleUrls": [],
            "styles": [],
            "template": "<div *ngIf=\"options\" #graph echarts class=\"graph-container\" [options]=\"options\" [ngStyle]=\"{height}\"></div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "GraphData",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "GraphMetadata",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "BORDER_RADIUS",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "elRefGraph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'graph'"
                        }
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "elRefGraphContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'graphContainer'"
                        }
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "FONT_STYLE",
                    "defaultValue": "'Rubik'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "graph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "echarts.EChartsOption",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "SPLIT_LINE_COLOR",
                    "defaultValue": "'#eff1f4'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getItemStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "{ label: { show: boolean; position: string; formatter: (params: any) => string; textStyle: { fontSize: string; fontWeight: string; }; }; labelLine: { show: boolean; }; emphasis: { label: { show: boolean; position: string; }; }; }",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLegend",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.LegendComponentOption",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getSeries",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.TooltipComponentOption",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getXAxis",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.XAXisComponentOption",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getYAxis",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.YAXisComponentOption",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getGrid",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.GridComponentOption",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "TitleComponentOption",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "setGraphHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, ViewContainerRef } from '@angular/core';\nimport { BaseGraph } from '../../base-classes/base-graph';\nimport * as echarts from 'echarts';\nimport { GraphSeriesDataPie } from '@models/graph-data.model';\n\n@Component({\n  selector: 'app-graph-pie',\n  template: `<div *ngIf=\"options\" #graph echarts class=\"graph-container\" [options]=\"options\" [ngStyle]=\"{height}\"></div>`\n})\nexport class GraphPieComponent extends BaseGraph {\n  constructor(cdr: ChangeDetectorRef, vcr: ViewContainerRef) {\n    super(cdr, vcr);\n  }\n\n  getTooltip(): echarts.TooltipComponentOption {\n    return undefined;  // { trigger: 'axis' };\n  }\n\n  getLegend(): echarts.LegendComponentOption {\n    return undefined;  // this.data.legend;\n  }\n\n  // getSeries(): echarts.PieSeriesOption {\n  getSeries(): any {\n    // const itemStyle = this.getItemStyle();\n    return [{ type: 'pie', data: this.data.series.data as GraphSeriesDataPie }];  //     this.data.series.map(item => ({ ...item, type: 'pie' }));\n  }\n\n  override getXAxis(): echarts.XAXisComponentOption {\n    return undefined;\n  }\n\n  override getYAxis(): echarts.YAXisComponentOption {\n    return undefined;\n  }\n\n  getItemStyle() {\n    return {\n      label: {\n        show: true,\n        position: 'inner',\n        formatter: function (params) {\n          return  params.value + '%\\n'\n        },\n        textStyle: {\n          fontSize: '30',\n          fontWeight: 'bold'\n        }\n      },\n      labelLine: {\n        show: true\n      },\n      emphasis: {\n        label: {\n          show: true,\n            position: 'center',\n        }\n      }\n    }\n  }\n  //\n  // getItemStyle() {\n  //   return {\n  //     normal : {\n  //       label : {\n  //         show: true, position: 'inner',\n  //           formatter : function (params){\n  //           return  params.value + '%\\n'\n  //         },\n  //       },\n  //       labelLine : {\n  //         show : true\n  //       }\n  //     },\n  //     emphasis : {\n  //       label : {\n  //         show : true,\n  //           position : 'center',\n  //           textStyle : {\n  //           fontSize : '30',\n  //             fontWeight : 'bold'\n  //         }\n  //       }\n  //     }\n  //   }\n  // }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "vcr",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vcr",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseGraph"
        },
        {
            "name": "GraphTimelineCategoryComponent",
            "id": "component-GraphTimelineCategoryComponent-7d24c862cb262b85735747569ccef2e57ac4f62d916299658e76e4b23ef77eb232bb7b144ff0fe4fe0ec93116d076117148231fef2ea287a985298e6b3677f37",
            "file": "src/app/shared/components/graphs/graph-timeline-category.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-graph-timeline-category",
            "styleUrls": [],
            "styles": [],
            "template": "<div *ngIf=\"options\" #graph echarts class=\"graph-container\" [options]=\"options\" [ngStyle]=\"{height}\" (chartClick)=\"onGraphEvent($event)\"></div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "GraphData",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "GraphMetadata",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "BORDER_RADIUS",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "elRefGraph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'graph'"
                        }
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "elRefGraphContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'graphContainer'"
                        }
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "FONT_STYLE",
                    "defaultValue": "'Rubik'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "graph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "echarts.EChartsOption",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "SPLIT_LINE_COLOR",
                    "defaultValue": "'#eff1f4'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getLegend",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.LegendComponentOption",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getSeries",
                    "args": [],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.TooltipComponentOption",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getXAxis",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.XAXisComponentOption",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getYAxis",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.YAXisComponentOption",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "onGraphEvent",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGrid",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.GridComponentOption",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "TitleComponentOption",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "setGraphHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, ViewContainerRef } from '@angular/core';\nimport { BaseGraph } from '../../base-classes/base-graph';\nimport * as echarts from 'echarts';\n\n@Component({\n  selector: 'app-graph-timeline-category',\n  template: `<div *ngIf=\"options\" #graph echarts class=\"graph-container\" [options]=\"options\" [ngStyle]=\"{height}\" (chartClick)=\"onGraphEvent($event)\"></div>`\n})\nexport class GraphTimelineCategoryComponent extends BaseGraph {\n  constructor(cdr: ChangeDetectorRef, vcr: ViewContainerRef) {\n    super(cdr, vcr);\n  }\n\n  getTooltip(): echarts.TooltipComponentOption {\n    return { trigger: 'axis' };\n  }\n  getLegend(): echarts.LegendComponentOption {\n    return this.data.legend;\n  }\n\n  getSeries(): echarts.LinesSeriesOption['data'] {\n    return this.data.series.data.map(item => ({ ...item, type: 'line', stack: 'Total' }));\n  }\n\n  override getXAxis(): echarts.XAXisComponentOption {\n    return {\n      type: 'category',\n      boundaryGap: false,\n      data: this.data.xAxis.data\n    };\n  }\n\n  override getYAxis(): echarts.YAXisComponentOption {\n    return {\n      type: 'value'\n    };\n  }\n\n  onGraphEvent(e) {\n    console.log(e);\n    const str = `line: ${e.seriesName}, column: ${e.name}, value: ${e.value}`;\n    alert(str);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "vcr",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vcr",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseGraph"
        },
        {
            "name": "GraphTimelineComponent",
            "id": "component-GraphTimelineComponent-cc0b5b22174100e1ca211110e9b54d453014df2bf49c9799d1a6f5c7d6bbd0a542f6d16e80e51fc15cf544235d46d907c004d4c0d851eb42a32484396e634953",
            "file": "src/app/shared/components/graphs/graph-timeline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-graph-timeline",
            "styleUrls": [],
            "styles": [],
            "template": "<div *ngIf=\"options\" #graph echarts class=\"graph-container\" [options]=\"options\" [ngStyle]=\"{height}\" (chartClick)=\"onGraphEvent($event)\"></div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "GraphData",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "GraphMetadata",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "BORDER_RADIUS",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "elRefGraph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'graph'"
                        }
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "elRefGraphContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'graphContainer'"
                        }
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "FONT_STYLE",
                    "defaultValue": "'Rubik'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "graph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "echarts.EChartsOption",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "SPLIT_LINE_COLOR",
                    "defaultValue": "'#eff1f4'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        144
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getLegend",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.LegendComponentOption",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getSeries",
                    "args": [],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.TooltipComponentOption",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getXAxis",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.XAXisComponentOption",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getYAxis",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.YAXisComponentOption",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "onGraphEvent",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGrid",
                    "args": [],
                    "optional": false,
                    "returnType": "echarts.GridComponentOption",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "getTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "TitleComponentOption",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                },
                {
                    "name": "setGraphHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseGraph"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, ViewContainerRef } from '@angular/core';\nimport { BaseGraph } from '../../base-classes/base-graph';\nimport * as echarts from 'echarts';\n\n@Component({\n  selector: 'app-graph-timeline',\n  template: `<div *ngIf=\"options\" #graph echarts class=\"graph-container\" [options]=\"options\" [ngStyle]=\"{height}\" (chartClick)=\"onGraphEvent($event)\"></div>`\n})\nexport class GraphTimelineComponent extends BaseGraph {\n  constructor(cdr: ChangeDetectorRef, vcr: ViewContainerRef) {\n    super(cdr, vcr);\n  }\n\n  getTooltip(): echarts.TooltipComponentOption {\n    return { trigger: 'axis' };\n  }\n  getLegend(): echarts.LegendComponentOption {\n    return this.data.legend;\n  }\n\n  getSeries(): echarts.LinesSeriesOption['data'] {\n    return this.data.series.data.map(item => ({ ...item, type: 'line', stack: 'Total' }));\n  }\n\n  override getXAxis(): echarts.XAXisComponentOption {\n    return {\n      type: 'category',\n      boundaryGap: false,\n      data: this.data.xAxis.data\n    };\n  }\n\n  override getYAxis(): echarts.YAXisComponentOption {\n    return {\n      type: 'value'\n    };\n  }\n\n  onGraphEvent(e) {\n    console.log(e);\n    const str = `line: ${e.seriesName}, column: ${e.name}, value: ${e.value}`;\n    alert(str);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "vcr",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vcr",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseGraph"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-c2984c869e1d729d76aaee9d4dce49f3f7bf6af71b1073968a1df13caf7413605ea791dda47de3f8960afc4f51e37f2d5cd02294205ec7bdfb2ab10dfe41dc52",
            "file": "src/app/shared/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { User } from '@models/user.model';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "MediconCategoryComponent",
            "id": "component-MediconCategoryComponent-c1b8724f7958211b8f82e94fb7e3a2e38baed6efc8d5c009c60da503bb2a18f014316e0fd1fd25178d87a9f634ff67200e39ba5774774e3d1237a24a5fff3ea0",
            "file": "src/app/shared/components/system/medicon-section-timeline/medicon-category/medicon-category.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-medicon-category",
            "styleUrls": [
                "./medicon-category.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medicon-category.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "MedicationsCategory",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "expandCondense",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isExpanded",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "emitExpandCondense",
                    "args": [
                        {
                            "name": "isExpanded",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isExpanded",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClickCondense",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickExpand",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MedicationsCategory } from '@models/medicon-server-data.model';\n\n@Component({\n  selector: 'app-medicon-category',\n  templateUrl: './medicon-category.component.html',\n  styleUrls: ['./medicon-category.component.scss']\n})\nexport class MediconCategoryComponent {\n  @Input() category: MedicationsCategory;\n  @Output() expandCondense = new EventEmitter();\n  isExpanded = true;\n\n  onClickExpand() {\n    this.emitExpandCondense(true);\n  }\n\n  onClickCondense() {\n    this.emitExpandCondense(false);\n  }\n\n  emitExpandCondense(isExpanded) {\n    this.isExpanded = isExpanded;\n    this.expandCondense.emit(isExpanded);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/styles/variables';\n\n:host {\n  display: flex;\n  align-items: center;\n\n  .expand-icon {\n    display: inline-block;\n    width: $medicon-category-expand-icon-width;\n  }\n\n  .frame {\n    width: $medicon-category-frame-width;\n    display: block;\n    border: none;\n    min-height: $medicon-graph-line-height;\n    box-shadow: inset 0 0 0 1px white, inset -1px 0 0 1px white, inset 0 0 0 2px black;\n    z-index: 2;\n    .frame-line-filler {\n      display: flex;\n      flex-direction: column;\n      height: $medicon-graph-line-height;\n    }\n  }\n\n  .medication {\n    flex-grow: 1;\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    min-height: $medicon-graph-line-height;\n    z-index: 1;\n    .medication-container {\n      width: 100%;\n      height: $medicon-graph-line-height;\n    }\n  }\n}\n",
                    "styleUrl": "./medicon-category.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"expand-icon\">\n  <i class=\"bi bi-plus\" *ngIf=\"!isExpanded\" (click)=\"onClickExpand()\"></i>\n  <i class=\"bi bi-dash\" *ngIf=\"isExpanded\" (click)=\"onClickCondense()\"></i>\n</div>\n\n<div class=\"frame\">\n  <ng-container *ngIf=\"isExpanded\">\n    <div *ngFor=\"let medication of category.medications\" class=\"frame-line-filler\"></div>\n  </ng-container>\n</div>\n\n<div class=\"medication\">\n  <ng-container *ngIf=\"!isExpanded\">\n    <app-medicon-category-item\n        [isCondensedCategory]=\"true\"\n        [category]=\"category\"\n    ></app-medicon-category-item>\n  </ng-container>\n  <ng-container *ngIf=\"isExpanded\">\n    <div *ngFor=\"let medication of category.medications; let i=index\" class=\"medication-container\">\n      <app-medicon-category-item\n          [isCondensedCategory]=\"false\"\n          [medication]=\"medication\"\n      ></app-medicon-category-item>\n    </div>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "MediconCategoryItemComponent",
            "id": "component-MediconCategoryItemComponent-ce2f5561ea3b98357ea906595d5c62639c741e3457068e3b21597e5b8a5be9a608ee1a6b7b9c85dcb63b667a677c3a8855d0e2504b51d617cc9c9f9360e619fc",
            "file": "src/app/shared/components/system/medicon-section-timeline/medicon-category-item/medicon-category-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-medicon-category-item",
            "styleUrls": [
                "./medicon-category-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medicon-category-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "MedicationsCategory",
                    "decorators": []
                },
                {
                    "name": "isCondensedCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "medication",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Medication",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Medication } from '@stories/models/medication.model';\nimport { MedicationsCategory } from '@models/medicon-server-data.model';\n\n@Component({\n  selector: 'app-medicon-category-item',\n  templateUrl: './medicon-category-item.component.html',\n  styleUrls: ['./medicon-category-item.component.scss']\n})\nexport class MediconCategoryItemComponent {\n  @Input() category: MedicationsCategory;\n  @Input() medication: Medication;\n  @Input() isCondensedCategory;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/styles/variables';\n\n:host {\n  display: flex;\n  align-items: center;\n  height: $medicon-graph-line-height;\n  overflow-y: hidden;\n}\n\n",
                    "styleUrl": "./medicon-category-item.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-container *ngIf=\"!isCondensedCategory\">\n  {{medication.name}}\n</ng-container>\n\n<ng-container *ngIf=\"isCondensedCategory\">\n  <span [style.color]=\"category.color\">{{category.name}}</span>\n</ng-container>\n"
        },
        {
            "name": "MediconComponent",
            "id": "component-MediconComponent-8756a383df8d60d9078f6026a3382916b4598b70a357c07b65bf9acaf2f0c8dffd9f00a947e6d50d4f10a405a8584f88d7bdfe73d76d4173ff59bd2fc50025d1",
            "file": "src/app/shared/components/system/medicon/medicon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-medicon",
            "styleUrls": [
                "./medicon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medicon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Direction",
                    "decorators": []
                },
                {
                    "name": "serverData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "MediconServerData",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "elRefGraphArea",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'graphArea', {static: true}"
                        }
                    ]
                },
                {
                    "name": "elRefHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'header', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, Output, Renderer2, ViewChild } from '@angular/core';\nimport { Direction } from '@stories/models/direction.model';\nimport { MediconServerData } from '@models/medicon-server-data.model';\nimport { MediconService } from '@shared/components/system/shared/services/medicon.service';\n\n// TODO:\n// 1. onPush\n\n\n@Component({\n  selector: 'app-medicon',\n  templateUrl: './medicon.component.html',\n  styleUrls: ['./medicon.component.scss']\n})\nexport class MediconComponent {\n  @ViewChild('header', { static: true }) elRefHeader: ElementRef;\n  @ViewChild('graphArea', { static: true }) elRefGraphArea: ElementRef;\n  @Input() direction: Direction;\n  @Input() text: any;\n  @Input() serverData: MediconServerData;\n\n  constructor(private mediconService: MediconService, private renderer: Renderer2) {}\n\n  ngOnInit() {\n    const width = this.elRefGraphArea.nativeElement.offsetWidth;\n    const roundedWidth = width - (width % 60);  // to accommodate all variations of resolution intervals\n    this.renderer.setProperty(this.elRefGraphArea.nativeElement, 'width', roundedWidth);\n    this.mediconService.init(this.serverData, roundedWidth);\n  }\n\n  // getTimeline(resolution): MediconTimelineRange {\n  //   const item = TimelineResolutionValues[resolution];\n  //   const pivotEpoch = this.timeService.getMidnightEpoch(this.serverData.timeline.pivotTime.iso.substring(11, 16));\n  //   const roundBy = 60000 * item.minutes;\n  //   const roundedPivotEpoch = pivotEpoch - (pivotEpoch % roundBy);\n  //   const roundedPivotLocalEpoch = this.timeService.getLocalEpoch(roundedPivotEpoch);\n  //   const tlStartEpoch = roundedPivotLocalEpoch - (6 * roundBy);\n  //   const elEndEpoch = roundedPivotLocalEpoch + (6 * roundBy);\n  //   const values = [];\n  //   let interval = 0;\n  //   for (let time = tlStartEpoch; time <= elEndEpoch; time += roundBy) {\n  //     if (item.type !== TimeDisplayType.DateTime || ++interval % 2 !== 0) {\n  //       values.push(this.timeService.getFormattedTime(item.type, time));\n  //     }\n  //   }\n  //   return {\n  //     pivotTime: {\n  //       epoch: this.timeService.getLocalEpoch(pivotEpoch),\n  //       iso: this.timeService.getLocalIso(pivotEpoch)\n  //     },\n  //     range: {\n  //       fromTimeGmt: values[0],\n  //       fromTimeEpoch: tlStartEpoch,\n  //       toTimeGmt: values[12],\n  //       toTimeEpoch: elEndEpoch\n  //     },\n  //     xAxisValues: values,\n  //     subDivision: item.subDivision,\n  //     interval: item.interval,\n  //     days: 12\n  //   }\n  // }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n$header-height: 3rem;\n\n:host {\n  display: block;\n\n  .hidden {\n    visibility: hidden;\n    margin: 0 $medicon-post-timeline-margin-right 0 $medicon-category-area-width;\n    background: cyan;\n    height: 10px;\n    padding: 0;\n  }\n\n  .header {\n    display: flex;\n    justify-content: space-between;\n    height: $header-height;\n    align-items: center;\n    padding-inline: 2rem;\n    > div {\n      width: 30%;\n    }\n    .resolution {\n      > select {\n        margin-inline-start: 0.5rem;\n      }\n    }\n    .action-icons {\n      font-size: var(--action-icons-font-size);\n      display: inline-flex;\n      align-items: center;\n      height: 100%;\n      i {\n        line-height: 1rem;\n        &:not(:last-child) {\n          margin-right: 4rem;\n        }\n      }\n      .paging-icons {\n        i {\n          margin-right: 1rem;\n          &.larger {\n             font-size: 1.5rem;\n          }\n          &.backward::before {\n            transform: scaleX(-1);\n            -ms-transform: scaleX(-1);\n          }\n        }\n      }\n    }\n  }\n\n  .sections {\n    :not(:last-child) {\n      margin-bottom: 1.5rem;\n    }\n    app-medications-section {\n      display: block;\n    }\n  }\n }\n\n",
                    "styleUrl": "./medicon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediconService",
                        "type": "MediconService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "mediconService",
                        "type": "MediconService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"hidden\">\n  <div class=\"graph-area\" #graphArea></div>\n</div>  <!-- serves to calculate the graph area width -->\n\n<div class=\"header\" #header>\n  <div class=\"action-icons horizontal-left\">\n    <i class=\"bi bi-printer print\"></i>\n    <i class=\"bi bi-arrow-clockwise\"></i>\n  </div>\n\n  <div class=\"title horizontal-center\">\n    {{serverData.title.fromTimeGmt}}&nbsp; -&nbsp; {{serverData.title.toTimeGmt}}\n  </div>\n\n  <div class=\"resolution horizontal-right vertical-center\" [dir]=\"direction\"></div>\n</div>\n\n<div class=\"sections\">\n  <app-medicon-section-container *ngFor=\"let section of serverData.sections\"\n    [direction]=\"direction\"\n    [text]=\"text\"\n    [section]=\"section\"\n  >\n  </app-medicon-section-container>\n</div>\n\n"
        },
        {
            "name": "MediconExecutionContinuousComponent",
            "id": "component-MediconExecutionContinuousComponent-cff48dea40bfbb2a55f10a75b8479ac19d9f97e49a4a548f46ac2b9040acf0d22cc7329722014a53190b0b5612774e137f69526a614017f7ba40b9130884bddd",
            "file": "src/app/shared/components/system/medicon-section-timeline/medicon-execution-continuous/medicon-execution-continuous.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-medicon-execution-continuous",
            "styleUrls": [
                "./medicon-execution-continuous.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medicon-execution-continuous.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "medication",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Medication",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "executionIconMargin",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "executionLineWidth",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "MediconLegendIconType",
                    "defaultValue": "MediconLegendIconType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "orderIconMargin",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "orderLineWidth",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getIconMargin",
                    "args": [
                        {
                            "name": "minutes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "minutes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLineWidth",
                    "args": [
                        {
                            "name": "startX",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "durationInMinutes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "startX",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "durationInMinutes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setMedication",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Medication } from '@stories/models/medication.model';\nimport { MediconLegendIconType } from '@shared/enums/medicon-legend-icon-type.enum';\nimport { MediconService } from '@shared/components/system/shared/services/medicon.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-medicon-execution-continuous',\n  templateUrl: './medicon-execution-continuous.component.html',\n  styleUrls: ['./medicon-execution-continuous.component.scss']\n})\nexport class MediconExecutionContinuousComponent implements OnInit {\n  @Input() medication: Medication;\n  MediconLegendIconType = MediconLegendIconType;\n  orderIconMargin = -1;\n  orderLineWidth = -1;\n  executionIconMargin = -1;\n  executionLineWidth = -1;\n  subscription: Subscription;\n\n  constructor(private mediconService: MediconService) {}\n\n  ngOnInit(): void {\n    // this.timelineWidthInMs = this.timelineRange.range.toTimeEpoch - this.timelineRange.range.fromTimeEpoch;\n    // this.orderIconMargin = this.getIconMargin(this.medication.orderTime);\n    // const orderLineDuration = this.medication.executionTime ? this.medication.executionTime - this.medication.orderTime : this.medication.duration;\n    // this.orderLineWidth = this.getLineWidth(this.orderIconMargin, orderLineDuration);\n    // if (this.medication.executionTime) {\n    //   this.executionIconMargin = this.getIconMargin(this.medication.executionTime);\n    //   this.executionLineWidth = this.getLineWidth(this.executionIconMargin, this.medication.duration);\n    // }\n\n    this.subscription = this.mediconService.timelineMetrics$.subscribe(() => {\n      this.setMedication();\n    })\n  }\n\n  setMedication() {\n    this.orderIconMargin = this.getIconMargin(this.medication.orderTime);\n    const orderLineDuration = this.medication.executionTime ? this.medication.executionTime - this.medication.orderTime : this.medication.duration;\n    this.orderLineWidth = this.getLineWidth(this.orderIconMargin, orderLineDuration);\n    if (this.medication.executionTime) {\n      this.executionIconMargin = this.getIconMargin(this.medication.executionTime);\n      this.executionLineWidth = this.getLineWidth(this.executionIconMargin, this.medication.duration);\n    }\n  }\n\n  getLineWidth(startX, durationInMinutes) {\n    return this.mediconService.msToWidth(durationInMinutes * 60000);\n  }\n\n  getIconMargin(minutes) {\n    const iconEpoch = this.mediconService.timelineMetrics.pivotEpoch + (minutes * 60000);\n    return this.mediconService.epochToX(iconEpoch);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  align-items: center;\n  height: 100%;\n  position: relative;\n\n  .icon, .line {\n    position: absolute;\n  }\n\n  .line {\n    height: 2px;\n    top: calc(50% - 2px);\n    background-position: center;\n  }\n\n  .order-icon {\n    z-index: 10;\n  }\n\n  .order-line {\n    z-index: 1;\n    background: repeating-linear-gradient(to right, black, black 5px, transparent 5px, transparent 7px, black 7px, black 9px, transparent 9px, transparent 11px);\n  }\n\n  .execution-icon {\n    z-index: 11;\n  }\n\n  .execution-line {\n    z-index: 2;\n    background: black;\n  }\n}\n",
                    "styleUrl": "./medicon-execution-continuous.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediconService",
                        "type": "MediconService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "mediconService",
                        "type": "MediconService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-medicon-icon\n    class=\"icon order-icon\"\n    [type]=\"MediconLegendIconType.Order\"\n    [style.margin-left.px]=\"orderIconMargin\">\n</app-medicon-icon>\n\n<div *ngIf=\"orderIconMargin !== -1\"\n    class=\"line order-line\"\n    [style.margin-left.px]=\"orderIconMargin\"\n    [style.width.px]=\"orderLineWidth\">\n</div>\n\n<app-medicon-icon\n    *ngIf=\"executionIconMargin !== -1\"\n    class=\"icon execution-icon\"\n    [type]=\"MediconLegendIconType.Execution\"\n    [style.margin-left.px]=\"executionIconMargin\">\n</app-medicon-icon>\n\n<div *ngIf=\"executionIconMargin !== -1\"\n     class=\"line execution-line\"\n     [style.margin-left.px]=\"executionIconMargin\"\n     [style.width.px]=\"executionLineWidth\">\n</div>\n"
        },
        {
            "name": "MediconExecutionPeriodicComponent",
            "id": "component-MediconExecutionPeriodicComponent-3bcc35ec48689de595b97ed0cd64ac2ed484ee42daa85a275181b6222ee36b684d10518603df53b2aa2dd00f23ee8018211aec6ea8a28e52c83355c984d1f2c1",
            "file": "src/app/shared/components/system/medicon-section-timeline/medicon-execution-periodic/medicon-execution-periodic.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-medicon-execution-periodic",
            "styleUrls": [
                "./medicon-execution-periodic.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medicon-execution-periodic.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-medicon-execution-periodic',\n  templateUrl: './medicon-execution-periodic.component.html',\n  styleUrls: ['./medicon-execution-periodic.component.scss']\n})\nexport class MediconExecutionPeriodicComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./medicon-execution-periodic.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n"
        },
        {
            "name": "MediconIconComponent",
            "id": "component-MediconIconComponent-4ede33975a3cc2a24ed1f179b93c47dd2692e07c104186fa99ecf751997368566a05967caf093735bb08eda352a613951c0f1b4713f1652051a913027e1eb9c2",
            "file": "src/app/shared/components/system/shared/medicon-icon/medicon-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-medicon-icon",
            "styleUrls": [
                "./medicon-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medicon-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "position",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fill",
                    "defaultValue": "'white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "fontSize",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "MediconLegendIconType",
                    "defaultValue": "MediconLegendIconType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "stroke",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { MediconLegendIcons } from '@shared/consts/medicon-legend-icons.const';\nimport { MediconLegendIconType } from '@shared/enums/medicon-legend-icon-type.enum';\n\n@Component({\n  selector: 'app-medicon-icon',\n  templateUrl: './medicon-icon.component.html',\n  styleUrls: ['./medicon-icon.component.scss']\n})\nexport class MediconIconComponent implements OnInit {\n  @Input() type: string;\n  @Input() position = '';  // 'aligned' for regular, '' for 0,0 centered\n  MediconLegendIconType = MediconLegendIconType;\n  fontSize = 1;\n  stroke = '';\n  fill = 'white';\n\n  ngOnInit(): void {\n    const item = MediconLegendIcons.find(item => item.type === this.type);\n    if (item.size) this.fontSize = item.size;\n    if (item.stroke) this.stroke = item.stroke;\n    if (item.fill) this.fill = item.fill;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$icon-size: 1rem;\n\n:host {\n  width: $icon-size;\n  height: $icon-size;\n  //background: yellow;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.centered {\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  //background: yellow;\n  i, .icon-order {\n    position: absolute;\n  }\n}\n\n.svg {\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  //background: cyan;\n  //width: calc()\n}\n\n.icon {\n  width: $icon-size;\n  height: $icon-size;\n}\n\n.icon-order {\n  border: 1px solid black;\n  background: white;\n  border-radius: 5px;\n}\n",
                    "styleUrl": "./medicon-icon.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<span [ngClass]=\"{aligned: position==='aligned', centered: !position}\">\n  <div class=\"svg hold\" [style.width.rem]=\"fontSize\" [style.height.rem]=\"fontSize\">\n\n    <ng-container [ngSwitch]=\"type\">\n      <ng-container *ngSwitchCase=\"MediconLegendIconType.Order\" [ngTemplateOutlet]=\"square\"></ng-container>\n      <ng-container *ngSwitchCase=\"MediconLegendIconType.Execution\" [ngTemplateOutlet]=\"circle\"></ng-container>\n      <ng-container *ngSwitchCase=\"MediconLegendIconType.RateChangeOrder\" [ngTemplateOutlet]=\"square\"></ng-container>\n      <ng-container *ngSwitchCase=\"MediconLegendIconType.Report\" [ngTemplateOutlet]=\"davidStar\"></ng-container>\n      <ng-container *ngSwitchCase=\"MediconLegendIconType.NotAdministered\" [ngTemplateOutlet]=\"circle\"></ng-container>\n      <ng-container *ngSwitchCase=\"MediconLegendIconType.NotExecuted\" [ngTemplateOutlet]=\"davidStar\"></ng-container>\n\n      <ng-container *ngSwitchCase=\"MediconLegendIconType.RateChange\" [ngTemplateOutlet]=\"triangle\"></ng-container>\n      <ng-container *ngSwitchCase=\"MediconLegendIconType.DosageDecrease\" [ngTemplateOutlet]=\"triangle\"></ng-container>\n      <ng-container *ngSwitchCase=\"MediconLegendIconType.DosageIncrease\" [ngTemplateOutlet]=\"triangle\"></ng-container>\n      <ng-container *ngSwitchCase=\"MediconLegendIconType.Hold\" [ngTemplateOutlet]=\"star\"></ng-container>\n      <ng-container *ngSwitchCase=\"MediconLegendIconType.CancelHold\" [ngTemplateOutlet]=\"star\"></ng-container>\n      <ng-container *ngSwitchCase=\"MediconLegendIconType.Stop\" [ngTemplateOutlet]=\"stop\"></ng-container>\n      <ng-container *ngSwitchCase=\"MediconLegendIconType.ExecutionTime\" [ngTemplateOutlet]=\"diamond\"></ng-container>\n    </ng-container>\n\n  </div>\n</span>\n\n<ng-template #star>\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 0 16 16\"\n       [attr.stroke]=\"stroke\" stroke-width=\"1.5\" [attr.fill]=\"fill\">\n    <path d=\"M 2.866 14.85 c -0.078 0.444 0.36 0.791 0.746 0.593 l 4.39 -2.256 l 4.389 2.256 c 0.386 0.198 0.824 -0.149 0.746 -0.592 l -0.83 -4.73 l 3.522 -3.356 c 0.33 -0.314 0.16 -0.888 -0.282 -0.95 l -4.898 -0.696 L 8.465 0.792 a 0.513 0.513 0 0 0 -0.927 0 L 5.354 5.12 l -4.898 0.696 c -0.441 0.062 -0.612 0.636 -0.283 0.95 l 3.523 3.356 l -0.83 4.73 z\"></path>\n  </svg>\n</ng-template>\n\n<ng-template #davidStar>\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 -10 500 510\"\n       [attr.stroke]=\"stroke\" stroke-width=\"45\" [attr.fill]=\"fill\">\n    <path d=\"M 33.003 369.492 c 2.233 3.869 6.36 6.25 10.825 6.25 c 0.015 0 0.029 0 0.044 0 l 128.002 -0.453 l 63.606 111.078 c 2.228 3.889 6.366 6.289 10.848 6.289 c 4.481 0 8.62 -2.399 10.848 -6.288 l 63.608 -111.079 l 128 0.453 c 0.015 0 0.029 0 0.044 0 c 4.465 0 8.592 -2.382 10.825 -6.25 c 2.241 -3.881 2.231 -8.665 -0.022 -12.538 l -64.392 -110.626 l 64.392 -110.626 c 2.255 -3.873 2.265 -8.657 0.022 -12.538 c -2.233 -3.869 -6.36 -6.25 -10.825 -6.25 c -0.015 0 -0.029 0 -0.044 0 l -128 0.453 L 257.176 6.288 C 254.948 2.399 250.81 0 246.328 0 c -4.482 0 -8.62 2.399 -10.848 6.289 l -63.606 111.079 l -128.002 -0.453 c -0.015 0 -0.029 0 -0.044 0 c -4.465 0 -8.592 2.382 -10.825 6.25 c -2.241 3.881 -2.232 8.665 0.022 12.538 l 64.392 110.625 L 33.025 356.954 C 30.77 360.827 30.762 365.611 33.003 369.492 z c 2.229 3.89 6.367 6.288 10.848 6.288 c 0.016 0 0.029 0 0.044 0 c -2.228 -3.892 -6.367 -6.289 -10.848 -6.289 c -0.015 0 -0.029 0 -0.044 0 z\"/>\n  </svg>\n</ng-template>\n\n<ng-template #square>\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"-1 -1 32 32\"\n       [attr.stroke]=\"stroke\" stroke-width=\"3\" [attr.fill]=\"fill\">\n    <rect x=\"1\" y=\"1\" width=\"28\" height=\"28\" />\n  </svg>\n</ng-template>\n\n<ng-template #circle>\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 0 50 50\"\n       [attr.stroke]=\"stroke\" stroke-width=\"4\" [attr.fill]=\"fill\">\n    <circle cx=\"25\" cy=\"25\" r=\"22\"/>\n  </svg>\n</ng-template>\n\n<ng-template #triangle>\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"-1 0 13 12\"\n       [attr.stroke]=\"stroke\" stroke-width=\"1.5\" [attr.fill]=\"fill\">\n    <path d=\"M 6 0 l 6 12 H 0 z\"/>\n  </svg>\n</ng-template>\n\n<ng-template #stop>\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"-2 -2 404 404\"\n       [attr.stroke]=\"stroke\" stroke-width=\"45\" [attr.fill]=\"fill\">\n    <g transform=\"translate(1173.2 38.831)\">\n      <g transform=\"matrix(.48018 0 0 .48018 -316.23 468.11)\">\n        <path d=\"m-1535.3-915.12-108.68 108.68 144.8 144.74c12.426 12.426 12.426 32.479 0 44.905l-144.8 144.8 108.68 108.68 144.8-144.8c12.426-12.426 32.479-12.426 44.905 0l144.8 144.8 108.68-108.68-144.8-144.8c-12.426-12.426-12.426-32.479 0-44.905l144.8-144.74-108.68-108.68-144.8 144.74c-12.426 12.426-32.479 12.426-44.905 0l-144.8-144.74z\"/>\n      </g>\n    </g>\n  </svg>\n</ng-template>\n\n<ng-template #diamond>\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 0 400 400\"\n       [attr.stroke]=\"stroke\" stroke-width=\"35\" [attr.fill]=\"fill\">\n    <g transform=\"translate(0 -652.36)\">\n      <rect id=\"rect3990\" style=\"stroke-linejoin: round\" transform=\"matrix(.70812 .70609 -.71524 .69888 0 0)\" height=\"269.45\" width=\"267.66\" y=\"328.97\" x=\"615.33\"/>\n    </g>\n  </svg>\n</ng-template>\n"
        },
        {
            "name": "MediconListerComponent",
            "id": "component-MediconListerComponent-675e6c93226554e57e4ef54eedbcc7b0cd64368eef687cb94d2ffe92c091ca112c8e860e9db5c6d2c904f66cd20279e1808c480f618d4edeb3b8df0293348bb7",
            "file": "src/stories/components/medicon-lister/medicon-lister.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-medicon-lister",
            "styleUrls": [
                "./medicon-lister.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medicon-lister.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "medications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                },
                {
                    "name": "deleteMedication",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isAfterViewInit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "medications$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClickAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteMedication",
                    "args": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { distinct, debounceTime, skip } from 'rxjs/operators';\nimport { Medication } from '@stories/models/medication.model';\n\n@Component({\n  selector: 'app-medicon-lister',\n  templateUrl: './medicon-lister.component.html',\n  styleUrls: ['./medicon-lister.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MediconListerComponent implements AfterViewInit, OnDestroy {\n  @Input() medications;\n  @Output() change = new EventEmitter();\n  @Output() deleteMedication = new EventEmitter<number>();\n  medications$ = new Subject();\n  subscription: Subscription;\n  isAfterViewInit = false;\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    this.isAfterViewInit = true;\n    this.subscription = this.medications$.pipe(\n      debounceTime(200),\n      distinct()\n    ).subscribe(value => {\n      this.change.emit(value);\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription && !this.subscription.closed) this.subscription.unsubscribe();\n  }\n\n  onChange(value) {\n    if (this.isAfterViewInit) this.medications$.next(value);\n    if (this.isAfterViewInit) console.log('onChange:', value, ', isAfterViewInit:', this.isAfterViewInit);\n  }\n\n  onClickAdd() {\n    const medication: Medication = {\n      id: 0,\n      name: '',\n      categoryId: 0,\n      type: undefined,\n      timingType: undefined,\n      orderTime: 0,\n      executionTime: 0,\n      duration: 0,\n      times: ['', '', '']\n    };\n    this.medications.unshift(medication);\n    this.medications = [...this.medications];\n    this.onChange(this.medications);\n    this.cdr.detectChanges();\n  }\n\n  onDeleteMedication(id) {\n    this.deleteMedication.emit(id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".medication-table {\n   background: #f0f0f0;\n  //height: 100px;\n  display: block;\n  list-style: none;\n  padding: 0; /* Remove padding */\n  margin: 0.5rem 0 0 0; /* Remove margins */\n}\n\n.add-button {\n  padding: 0 0.5rem;\n  font-size: 0.8rem;\n  margin-inline-start: 2rem;\n}\n",
                    "styleUrl": "./medicon-lister.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div>\n  <span>Medications: {{medications.length}}</span>\n  <button (click)=\"onClickAdd()\" type=\"button\" class=\"btn btn-success add-button\">ADD</button>\n</div>\n\n\n<ng-template #itemTemplate let-medication=\"item\" let-index=\"index\">\n  <app-medicon-lister-item\n      [medication]=\"medication.value\"\n      [index]=\"index\"\n      (delete)=\"onDeleteMedication($event)\"\n  ></app-medicon-lister-item>\n</ng-template>\n\n<div class=\"medication-table\">\n  <bs-sortable\n      [(ngModel)]=\"medications\"\n      [itemTemplate]=\"itemTemplate\"\n      (onChange)=\"onChange($event)\"\n      itemClass=\"sortable-item\"\n      itemActiveClass=\"sortable-item-active\"\n      placeholderItem=\"\"\n      placeholderClass=\"placeholderStyle text-center\"\n      wrapperClass=\"sortable-wrapper\"\n  ></bs-sortable>\n</div>\n"
        },
        {
            "name": "MediconListerItemComponent",
            "id": "component-MediconListerItemComponent-f94d5ef56e58944db5326c2c789bc43a662be9977bb11004616f03ad83564d9a3a20f6ac97cc15185f77c72a30ce868e5b05422ed7ac3a4975a2421da6e17614",
            "file": "src/stories/components/medicon-lister-item/medicon-lister-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-medicon-lister-item",
            "styleUrls": [
                "./medicon-lister-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medicon-lister-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "medication",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Medication",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "delete",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "categoryMedications",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "ExecutionType",
                    "defaultValue": "ExecutionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "MedicationCategories",
                    "defaultValue": "MedicationCategories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "medications",
                    "defaultValue": "medications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeCategory",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeMedication",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeTime",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClickDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCategoryMedication",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "stopPropagation",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Medication } from '@stories/models/medication.model';\nimport { MedicationCategories } from '@stories/const/medication-categories.const';\nimport { medications } from '@stories/const/medications.const';\nimport { ExecutionType } from '@stories/enums/execution-type.enum';\n\n@Component({\n  selector: 'app-medicon-lister-item',\n  templateUrl: './medicon-lister-item.component.html',\n  styleUrls: ['./medicon-lister-item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MediconListerItemComponent implements OnInit {\n  @Input() medication: Medication;\n  @Input() index: number;\n  @Output() delete = new EventEmitter<number>()\n  MedicationCategories = MedicationCategories;\n  medications = medications;\n  ExecutionType = ExecutionType;\n  categoryMedications = [];\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.setCategoryMedication();\n  }\n\n  onChangeCategory(e) {\n    const categoryId = Number(e.target.value);\n    if (categoryId !== this.medication.categoryId) {\n      this.medication.categoryId = Number(e.target.value);\n      this.medication.id = 0;\n      this.setCategoryMedication();\n    }\n    e.stopPropagation();\n  }\n\n  onChangeMedication(e) {\n    this.medication.id = Number(e.target.value);\n    this.medication.name = this.medications.find(medication => medication.id === this.medication.id).name;\n    e.stopPropagation();\n  }\n\n  stopPropagation(e) {\n    e.stopPropagation();\n  }\n\n  setCategoryMedication() {\n    this.categoryMedications = this.medications.filter(medication => medication.categoryId === this.medication.categoryId);\n  }\n\n  onChangeTime(e, i) {\n    this.stopPropagation(e);\n    setTimeout(() => {\n      this.medication.times[i] = e.target.value;\n    });\n  }\n\n\n  onClickDelete() {\n    let isConfirm = false;\n    const item = this.medications.find(medication => medication.id === this.medication.id);\n    if (item) isConfirm = confirm(`are you sure you want to delete \"${item.name}\"?`);\n    if (!item || isConfirm) {\n      this.delete.emit(this.medication.id);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$border-color: #aaaaaa;\n\n.medication-row {\n  //padding-inline: 1rem;\n  //background: brown;\n  padding-inline: 1rem;\n  border: 1px solid $border-color;\n  border-top: none;\n  padding: 6px;\n  display: flex;\n  align-items: center;\n  &.first {\n    border-top: 1px solid $border-color;\n  }\n  .medication {\n    flex-grow: 1;\n  }\n  .delete {\n    width: 2rem;\n    display: block;\n    text-align: right;\n  }\n}\n\n.prop {\n  display: inline-flex;\n  align-items: center;\n  margin-inline-end: 2rem;\n  .label {\n    margin-inline-end: 0.6rem;\n  }\n  > input {\n    width: 5rem;\n  }\n}\n\n.category {\n  //background: cyan;\n}\n",
                    "styleUrl": "./medicon-lister-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"medication-row\" [class.first]=\"index===0\">\n  <div class=\"medication\">\n    <div class=\"prop category\">\n      <span class=\"label\">Category</span>\n      <select [(ngModel)]=\"medication.categoryId\" (change)=\"onChangeCategory($event)\">\n        <option *ngFor=\"let option of MedicationCategories\" [value]=\"option.id\">{{option.label}}</option>\n      </select>\n    </div>\n\n    <div class=\"prop medication\">\n      <span class=\"label\">Medication</span>\n      <select [ngModel]=\"medication.id\" (change)=\"onChangeMedication($event)\">\n        <option *ngFor=\"let item of categoryMedications\" [value]=\"item.id\">{{item.name}}</option>\n      </select>\n    </div>\n\n    <div class=\"prop execution\">\n      <span class=\"label\">Type</span>\n      <select [(ngModel)]=\"medication.type\" (change)=\"stopPropagation($event)\">\n        <option [value]=\"ExecutionType.Continuous\">Continuous</option>\n        <option [value]=\"ExecutionType.Periodic\">Periodic</option>\n      </select>\n    </div>\n\n\n    <!--     C O N T I N U O U S     -->\n    <ng-container *ngIf=\"medication.type===ExecutionType.Continuous\">\n      <div class=\"prop\">\n        <span class=\"label\">Relative minutes:</span>\n      </div>\n\n      <div class=\"prop\">\n        <span class=\"label\">Order Time</span>\n        <input type=\"text\" [(ngModel)]=\"medication.orderTime\" (change)=\"stopPropagation($event)\">\n      </div>\n\n      <div class=\"prop\">\n        <span class=\"label\">Execution Time</span>\n        <input type=\"number\" [(ngModel)]=\"medication.executionTime\" (change)=\"stopPropagation($event)\">\n      </div>\n\n      <div class=\"prop\">\n        <span class=\"label\">Duration</span>\n        <input type=\"number\" [(ngModel)]=\"medication.duration\" (change)=\"stopPropagation($event)\">\n      </div>\n    </ng-container>\n\n\n    <!--     P E R I O D I C     -->\n    <ng-container *ngIf=\"medication.type===ExecutionType.Periodic\">\n      <div class=\"prop periodic\">\n        <span class=\"label\">Times</span>\n\n        <!-- not using *ngFor b/c bootstrap sortable throws error when -->\n        <!-- typing in input field since it is not designed for typing -->\n        <input type=\"text\" [value]=\"medication.times[0]\"\n               (change)=\"onChangeTime($event, 0)\"\n               (keydown)=\"onChangeTime($event, 0)\"\n               (paste)=\"onChangeTime($event, 0)\"\n        >\n        <input type=\"text\" [value]=\"medication.times[1]\"\n               (change)=\"onChangeTime($event, 1)\"\n               (keydown)=\"onChangeTime($event, 1)\"\n               (paste)=\"onChangeTime($event, 1)\"\n        >\n        <input type=\"text\" [value]=\"medication.times[2]\"\n               (change)=\"onChangeTime($event, 2)\"\n               (keydown)=\"onChangeTime($event, 2)\"\n               (paste)=\"onChangeTime($event, 2)\"\n        >\n      </div>\n    </ng-container>\n  </div>\n\n  <div class=\"delete\">\n    <i class=\"bi bi-trash\" (click)=\"onClickDelete()\"></i>\n  </div>\n</div>\n"
        },
        {
            "name": "MediconResolutionComponent",
            "id": "component-MediconResolutionComponent-98b0d4848817b7d4b0ca3d76e627dd53c2e7954dac9d2cf829196562c17372ab2006793461562d3ffa26ae634d1b0a8a6d5875815f5ba9705b2fb700d28ec44b",
            "file": "src/app/shared/components/system/shared/medicon-resolution/medicon-resolution.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-medicon-resolution",
            "styleUrls": [
                "./medicon-resolution.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medicon-resolution.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changeResolution",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "endLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isPivotEnabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "ix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "scrollSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "sliderMax",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "sliderWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "startLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeSlider",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClickPivot",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSlider",
                    "args": [
                        {
                            "name": "resolution",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "resolution",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { MediconService } from '@shared/components/system/shared/services/medicon.service';\nimport { take } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-medicon-resolution',\n  templateUrl: './medicon-resolution.component.html',\n  styleUrls: ['./medicon-resolution.component.scss']\n})\nexport class MediconResolutionComponent implements OnInit, OnDestroy {\n  @Input() text;\n  @Output() changeResolution = new EventEmitter();\n  options;\n  label;\n  sliderWidth;\n  sliderMax;\n  ix;\n  value;\n  isPivotEnabled = true;\n  startLabel;\n  endLabel;\n  scrollSubscription: Subscription;\n\n  constructor(private mediconService: MediconService) {}\n\n  ngOnInit(): void {\n    this.options = this.text.resolution.options;\n    const len = this.options.length;\n    this.sliderWidth = len;\n    this.sliderMax = len - 1;\n    this.startLabel = this.options[0].label;\n    this.endLabel = this.options[len - 1].label;\n    // this.subscription = this.mediconService.resolution$.subscribe(resolution => {\n    //   this.ix = this.options.findIndex(item => item.value === resolution);\n    //   this.label = this.options[this.ix].label;\n    // });\n    this.scrollSubscription = this.mediconService.scroll$.subscribe(isPivotEnabled => {\n      console.log('isPivotEnabled:', isPivotEnabled);\n      this.isPivotEnabled = isPivotEnabled;\n    });\n    this.updateSlider(this.mediconService.resolution);\n  }\n\n  ngOnDestroy() {\n    if (this.scrollSubscription) this.scrollSubscription.unsubscribe();\n  }\n\n  onChangeSlider(e) {\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    const resolution = this.options[Number(e.target.value)].value;\n    this.updateSlider(resolution);\n    this.mediconService.setResolution(resolution);\n  }\n\n  updateSlider(resolution) {\n    this.ix = this.options.findIndex(item => item.value === resolution);\n    this.label = this.options[this.ix].label;\n  }\n\n  onClickPivot() {\n    // this.isPivotEnabled = true;\n    this.mediconService.scrollToPivot();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$value-size-net: 20;\n$value-size: 20px;\n$pivot-icon-color: green;\n\n:host {\n  display: flex;\n  align-items: center;\n  position: relative;\n\n  .lines-collapse {\n    color: $pivot-icon-color;\n  }\n\n  .slider-container {\n    background: #e7e7e7;\n    padding: 3px 10px;\n    border-radius: 5px;\n    border: 1px solid #e1e1e1;\n\n    .m1 {\n      margin-inline-end: 1rem;\n    }\n\n    .h24 {\n      margin-inline-start: 1rem;\n    }\n\n    .slider {\n      position: relative;\n      display: flex;\n      align-items: center;\n\n      .value {\n        z-index: 2;\n        position: absolute;\n        top: -5px;\n        left: -7px;\n        width: 33px;\n        height: 18px;\n        background: #0F737DFF;\n        border-radius: 8px;\n        pointer-events: none;\n        cursor: pointer;\n        font-size: 0.8em;\n        color: white;\n      }\n\n      input {\n        z-index: 1;\n        width: 100%;\n        background-color: white; // transparent;\n        border-radius: 10px;\n        color: red;\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        margin: 0;\n        height: 8px;\n        cursor: pointer;\n      }\n    }\n  }\n\n  .pivot, .lines-collapse {\n    padding: 1px 2px;\n    border: 1px solid $pivot-icon-color;\n    border-radius: 4px;\n    margin-left: 2.5rem;\n    cursor: pointer;\n    i {\n      color: $pivot-icon-color;\n      pointer-events: none;\n      font-size: 0.8rem;\n    }\n    &.disabled {\n      border: 1px solid gray;\n      opacity: 0.5;\n      i {\n        color: gray;\n      }\n    }\n  }\n\n  .lines-collapse {\n    padding: 0;\n    //padding: 2px 2px;\n    //border: none;\n    display: flex;\n    align-items: center;\n    margin-left: 0;\n    margin-right: 2.5rem;\n    //border: 0;\n    i {\n      font-size: 1rem;\n      padding-top: 1px;\n    }\n  }\n}\n",
                    "styleUrl": "./medicon-resolution.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediconService",
                        "type": "MediconService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "mediconService",
                        "type": "MediconService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!--<div class=\"lines-collapse centered\">\n  <i class=\"bi bi-arrows-collapse\"></i>\n</div>-->\n\n<div class=\"slider-container vertical-center\">\n  <span class=\"m1\">{{startLabel}}</span>\n  <div [style.width.rem]=\"sliderWidth\" class=\"slider\">\n    <div class=\"value centered\" [style.marginLeft.rem]=\"ix\">{{label}}</div>\n    <input type=\"range\" min=\"0\"\n      [value]=\"ix\"\n      [attr.max]=\"sliderMax\"\n      [attr.step]=\"1\"\n      (input)=\"onChangeSlider($event)\">\n  </div>\n  <span class=\"h24\">{{endLabel}}</span>\n</div>\n\n<div class=\"pivot centered\"\n     [class.disabled]=\"!isPivotEnabled\"\n     (click)=\"onClickPivot()\">\n  <i class=\"bi bi-geo-fill\"></i>\n</div>\n"
        },
        {
            "name": "MediconScrollbarComponent",
            "id": "component-MediconScrollbarComponent-8e911770a10ff705601fb2002a9942318677d378487fb8f010c9554baae1069cc403ae66a48f93f53e389a42b904c52f4ec4d7dcbb2246ebfd56c1e869d92285",
            "file": "src/app/shared/components/system/shared/medicon-scrollbar/medicon-scrollbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-medicon-scrollbar",
            "styleUrls": [
                "./medicon-scrollbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medicon-scrollbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "medicationsAreaWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "timelineRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "MediconTimelineRange",
                    "decorators": []
                },
                {
                    "name": "timelineWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fullWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { MediconTimelineRange } from '@models/medicon-server-data.model';\n\n@Component({\n  selector: 'app-medicon-scrollbar',\n  templateUrl: './medicon-scrollbar.component.html',\n  styleUrls: ['./medicon-scrollbar.component.scss']\n})\nexport class MediconScrollbarComponent implements OnInit {\n  @Input() timelineRange: MediconTimelineRange;\n  @Input() medicationsAreaWidth = 0;\n  @Input() timelineWidth = 0;\n  fullWidth;\n\n  ngOnInit(): void {\nthis.fullWidth = this.timelineWidth * this.timelineRange.days;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".scrollbar {\n  display: block;\n  background: cyan;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  height: 16px;\n  word-wrap: anywhere;\n  .scrollbar-content {\n  width: 3000px;\n\n  }\n}\n",
                    "styleUrl": "./medicon-scrollbar.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"scrollbar\"\n    [style.marginLeft.px]=\"medicationsAreaWidth\"\n     [style.width.px]=\"timelineWidth\"\n>\n  <div class=\"scrollbar-content\">\n    wewe jn kjhkjh jkh jkh jkh kjh kjh kjh kjh kjh jkh kjh kjh jkh kjh kjhkjh jh k\n    wewe jn kjhkjh jkh jkh jkh kjh kjh kjh kjh kjh jkh kjh kjh jkh kjh kjhkjh jh k\n    wewe jn kjhkjh jkh jkh jkh kjh kjh kjh kjh kjh jkh kjh kjh jkh kjh kjhkjh jh k\n    wewe jn kjhkjh jkh jkh jkh kjh kjh kjh kjh kjh jkh kjh kjh jkh kjh kjhkjh jh k\n    wewe jn kjhkjh jkh jkh jkh kjh kjh kjh kjh kjh jkh kjh kjh jkh kjh kjhkjh jh k\n    wewe jn kjhkjh jkh jkh jkh kjh kjh kjh kjh kjh jkh kjh kjh jkh kjh kjhkjh jh k\n  </div>\n</div>\n"
        },
        {
            "name": "MediconSectionContainerComponent",
            "id": "component-MediconSectionContainerComponent-9c7efceec914c7d0f9c24f5fd891de977fb63dd36e98ef99fdf08cbbaac56f3c32ba4e855b1f3add95b60be710918fbec5aba564bca39d17b0f74a2abbdc299c",
            "file": "src/app/shared/components/system/medicon-section-container/medicon-section-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-medicon-section-container",
            "styleUrls": [
                "./medicon-section-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medicon-section-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "section",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "MediconSection",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changeResolution",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "MediconSectionType",
                    "defaultValue": "MediconSectionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MediconSection } from '@models/medicon-server-data.model';\nimport { MediconSectionType } from '@shared/enums/medicon-section-type.enum';\n\n@Component({\n  selector: 'app-medicon-section-container',\n  templateUrl: './medicon-section-container.component.html',\n  styleUrls: ['./medicon-section-container.component.scss']\n})\nexport class MediconSectionContainerComponent {\n  @Input() direction;\n  @Input() text;\n  @Input() section: MediconSection;\n  @Output() changeResolution = new EventEmitter();\n  MediconSectionType = MediconSectionType;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./medicon-section-container.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-container [ngSwitch]=\"section.type\">\n  <app-medicon-section-timeline\n      *ngSwitchCase=\"MediconSectionType.Timeline\"\n      [direction]=\"direction\"\n      [text]=\"text\"\n      [section]=\"section\"\n  >\n  </app-medicon-section-timeline>\n</ng-container>\n"
        },
        {
            "name": "MediconSectionTimelineComponent",
            "id": "component-MediconSectionTimelineComponent-9a0bc2270519c2f102e1c1abf9491315e99a3bd9d197a2d41c06613d3eeeefed74813c0cb2b3cf3df0b4726e9ca27da4484e42b48574d87b74540a4fa8b3f291",
            "file": "src/app/shared/components/system/medicon-section-timeline/medicon-section-timeline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-medicon-section-timeline",
            "styleUrls": [
                "./medicon-section-timeline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medicon-section-timeline.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "section",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "MediconSection",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categoryStates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "elRefCategories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'categories'"
                        }
                    ]
                },
                {
                    "name": "elRefTimelineGraph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'timelineGraph'"
                        }
                    ]
                },
                {
                    "name": "legendColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "medications",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "MediconLegendIcons",
                    "defaultValue": "MediconLegendIcons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "timelineGraphWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onExpandCondense",
                    "args": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isExpanded",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isExpanded",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMedications",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { MediconSection } from '@models/medicon-server-data.model';\nimport { MediconLegendIcons } from '@shared/consts/medicon-legend-icons.const';\nimport { MediconService } from '@shared/components/system/shared/services/medicon.service';\n\n@Component({\n  selector: 'app-medicon-section-timeline',\n  templateUrl: './medicon-section-timeline.component.html',\n  styleUrls: ['./medicon-section-timeline.component.scss']\n})\nexport class MediconSectionTimelineComponent implements OnInit {\n  @ViewChild('categories') elRefCategories: ElementRef;\n  @ViewChild('timelineGraph') elRefTimelineGraph: ElementRef;\n  @Input() direction;\n  @Input() text;\n  @Input() section: MediconSection;\n  MediconLegendIcons = MediconLegendIcons;\n  legendColumns;\n  timelineGraphWidth;\n  categoryStates;\n  medications = [];\n\n  constructor(private mediconService: MediconService) {\n    this.legendColumns = [\n      this.MediconLegendIcons.filter(item => item.column === 0),\n      this.MediconLegendIcons.filter(item => item.column === 1)\n    ]\n  }\n\n  ngOnInit() {\n    this.categoryStates = this.section.categories.map(cat => ({ id: cat.id, isExpanded: true }));\n    this.setMedications();\n  }\n\n  onExpandCondense(id, isExpanded) {\n    const item = this.categoryStates.find(cat => cat.id === id);\n    item.isExpanded = isExpanded;\n    this.setMedications();\n  }\n\n  setMedications() {\n    this.medications = [];\n    this.categoryStates.forEach(catState => {\n      if (!catState.isExpanded) {\n        this.medications.push(null);\n      } else {\n        const category = this.section.categories.find(cat => cat.id === catState.id);\n        category.medications.forEach(medication => this.medications.push(medication));\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n:host {\n  display: flex;\n  flex-direction: column;\n}\n\n.header {\n  width: 100%;\n  height: 2.5rem;\n  display: inline-flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-inline: 2rem;\n  > div {\n    width: 30%;\n  }\n  &.top {\n    background: #eeeeee;\n    margin-bottom: 1rem;\n  }\n  &.bottom {\n    margin-top: 1rem;\n  }\n  > .action-icons {\n    span {\n      width: 5.3rem !important;\n      display: inline-block;\n      //padding-inline-end: 4rem;\n      &.legend-title {\n        overflow: visible;\n        width: 5.3rem !important;\n      }\n      i {\n        font-size: var(--action-icons-font-size);\n      }\n    }\n  }\n}\n\n.legend {\n  padding-inline: 1rem;\n  display: inline-grid;\n  column-gap: 5rem;\n  grid-template-columns: auto auto;\n  ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    li {\n      margin-bottom: 0.2rem;\n      app-medicon-icon {\n        margin-inline-end: 1rem;\n      }\n    }\n  }\n}\n\n.content {\n  display: inline-flex;\n  width: 100%;\n  flex-direction: row;\n  .categories {\n    width: $medicon-category-area-width;\n    display: block;\n  }\n  .timelineGraph {\n    flex-grow: 1;\n    margin-right: $medicon-post-timeline-margin-right;\n  }\n}\n\n",
                    "styleUrl": "./medicon-section-timeline.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediconService",
                        "type": "MediconService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "mediconService",
                        "type": "MediconService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container\n    [ngTemplateOutlet]=\"header\"\n    [ngTemplateOutletContext]=\"{isTop: true}\">\n</ng-container>\n\n<div class=\"content\">\n  <div class=\"categories\" #categories>\n    <app-medicon-category\n      *ngFor=\"let category of section.categories; let i=index\"\n      [category]=\"category\"\n      (expandCondense)=\"onExpandCondense(category.id, $event)\">\n    </app-medicon-category>\n  </div>\n\n  <div class=\"timelineGraph\" #timelineGraph>\n    <app-medicon-timeline-graph\n      [categories]=\"section.categories\"\n      [medications]=\"medications\">\n    </app-medicon-timeline-graph>\n  </div>\n</div>\n\n<ng-container\n    [ngTemplateOutlet]=\"header\"\n    [ngTemplateOutletContext]=\"{isTop: false}\">\n</ng-container>\n\n<ng-template #header let-isTop=\"isTop\">\n  <div class=\"header vertical-center\" [class.top]=\"isTop\" [class.bottom]=\"!isTop\">\n    <div class=\"action-icons horizontal-left vertical-center\">\n      <span class=\"legend-title\"\n            [popover]=\"legendTemplate\"\n            [placement]=\"'bottom'\"\n            [container]=\"'body'\"\n            [isOpen]=\"false\"\n            [triggers]=\"'hover'\">{{text.medicon.legend}}</span>\n      <span><i class=\"bi bi-plus-circle\"></i></span>\n      <span><i class=\"bi bi-alarm\"></i></span>\n    </div>\n    <div><span *ngIf=\"isTop\" class=\"horizontal-center\">{{section.name}}</span></div>\n    <div *ngIf=\"isTop\" class=\"horizontal-right\">\n      <app-medicon-resolution\n          [text]=\"text\"\n      ></app-medicon-resolution>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #legendTemplate>\n  <div class=\"legend\" [dir]=\"direction\">\n    <ng-container *ngFor=\"let column of legendColumns; let i=index\">\n      <ul>\n        <li *ngFor=\"let item of column\">\n          <div class=\"vertical-center\">\n            <app-medicon-icon [type]=\"item.type\" [position]=\"'aligned'\"></app-medicon-icon>\n            <span>{{text.medicon.icons[item.type]}}</span>\n          </div>\n        </li>\n      </ul>\n    </ng-container>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "MediconTesterComponent",
            "id": "component-MediconTesterComponent-fbd8b15ffa2bf28e0553f05fc6787e9d6748105c33d66039cf80a4ba622fc92ad243378949b9255cd863027616c7d74a38e1bc4a64ec0bfda7c7e84209607670",
            "file": "src/stories/components/medicon-tester/medicon-tester.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-medicon-tester",
            "styleUrls": [
                "./medicon-tester.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medicon-tester.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "defaultSettings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Settings",
                    "decorators": []
                },
                {
                    "name": "direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "Direction",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accordionClass",
                    "defaultValue": "'settings-accordion'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isShowSettings",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "LOCAL_STORAGE_KEY",
                    "defaultValue": "'medicationsSettings'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "prevSettings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "resolutionSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "serverData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediconServerData",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Settings",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "buildServerData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearLocalStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFromLocalStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPivotEpoch",
                    "args": [
                        {
                            "name": "time",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ pivotEpoch: any; pivotMidnightEpoch: any; }",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTimelineRange",
                    "args": [
                        {
                            "name": "pivotMidnightEpoch",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MediconServerTimelineRange",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pivotMidnightEpoch",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTimelineRangeInGmt",
                    "args": [
                        {
                            "name": "pivotMidnightEpoch",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ fromTimeGmt: any; toTimeGmt: any; }",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pivotMidnightEpoch",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangePivotTime",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeResolution",
                    "args": [
                        {
                            "name": "resolution",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "resolution",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeSectionMedications",
                    "args": [
                        {
                            "name": "sectionIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "medications",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sectionIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "medications",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClickCancelSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickDefaultSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickResetTime",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickSaveSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteMedication",
                    "args": [
                        {
                            "name": "sectionIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "medicationId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sectionIndex",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "medicationId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveToLocalStorage",
                    "args": [
                        {
                            "name": "isShowToaster",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isShowToaster",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Input, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Settings } from '@stories/models/settings.model';\nimport { ToastrService } from 'ngx-toastr';\nimport { MedicationsCategory, MediconSection, MediconServerTimelineRange, MediconServerData } from '@models/medicon-server-data.model';\nimport { Direction } from '@stories/models/direction.model';\nimport { MedicationCategories } from '@stories/const/medication-categories.const';\nimport { TimeDisplayType } from '@shared/enums/time-display-type.enum';\nimport { TimelineResolutionValues } from '@shared/consts/timeline-resolution-values.const';\nimport { TimeService } from '@shared/services/time.service';\nimport { MediconService } from '@shared/components/system/shared/services/medicon.service';\nimport { Subscription } from 'rxjs';\nimport * as dayjs from 'dayjs';\n\n@Component({\n  selector: 'app-medicon-tester',\n  templateUrl: './medicon-tester.component.html',\n  styleUrls: ['./medicon-tester.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MediconTesterComponent implements OnInit, OnDestroy {\n  @Input() text: any;\n  @Input() direction: Direction;\n  @Input() defaultSettings: Settings;\n  settings: Settings;\n  LOCAL_STORAGE_KEY = 'medicationsSettings';\n  isShowSettings = false;\n  accordionClass = 'settings-accordion';\n  prevSettings;\n  serverData: MediconServerData;\n  resolutionSubscription: Subscription;\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private toastr: ToastrService,\n    private timeService: TimeService,\n    private mediconService: MediconService) {\n    window['windowsSettings'] = {\n      localDateFormatPadded: 'DD/MM/YY',\n      localDateFormatUnpadded: 'D/M/YY'\n    }\n  }\n\n  ngOnInit() {\n    setTimeout(() => {\n      this.initSettings();\n      // this.onClickSettings();\n      this.buildServerData();\n      this.resolutionSubscription = this.mediconService.resolution$.subscribe(resolution => this.onChangeResolution(resolution));\n    }, 50);\n  }\n\n  ngOnDestroy() {\n    if (this.resolutionSubscription) this.resolutionSubscription.unsubscribe();\n  }\n\n  initSettings() {\n    const item = this.getFromLocalStorage();\n    this.settings = item ? JSON.parse(item) : JSON.parse(JSON.stringify(this.defaultSettings));\n  }\n\n  onClickResetTime() {\n    this.settings.pivotTime = new Intl.DateTimeFormat('en-GB', { timeStyle: 'short' }).format(new Date());\n    this.saveToLocalStorage();\n  }\n\n  onChangePivotTime(e: Event) {\n    this.settings.pivotTime = (e.target as any).value;\n    if (this.settings.pivotTime.length === 1) this.settings.pivotTime = '0' + this.settings.pivotTime;\n    if (this.settings.pivotTime.length === 2) this.settings.pivotTime += ':00';\n    if (this.settings.pivotTime.length === 4) this.settings.pivotTime = '0' + this.settings.pivotTime;\n    this.saveToLocalStorage();\n  }\n\n  onClickSettings() {\n    this.prevSettings = JSON.parse(JSON.stringify(this.settings));\n    this.isShowSettings = true;\n  }\n\n  onChangeResolution(resolution) {\n    if (this.settings.resolution === resolution) return;\n    this.settings.resolution = resolution;\n    this.saveToLocalStorage(false);\n  }\n\n  onClickSaveSettings() {\n    this.saveToLocalStorage();\n    this.isShowSettings = false;\n  }\n\n  onClickCancelSettings() {\n    this.settings = this.prevSettings;\n    this.isShowSettings = false;\n  }\n\n  saveToLocalStorage(isShowToaster = true) {\n    const item = JSON.stringify(this.settings);\n    localStorage.setItem(this.LOCAL_STORAGE_KEY, item);\n    if (isShowToaster) this.toastr.success('Settings were saved');\n    if (isShowToaster) this.buildServerData();\n  }\n\n  getFromLocalStorage() {\n    return localStorage.getItem(this.LOCAL_STORAGE_KEY);\n  }\n\n  clearLocalStorage() {\n    return localStorage.removeItem(this.LOCAL_STORAGE_KEY);\n  }\n\n  onChangeSectionMedications(sectionIndex, medications) {\n    this.settings.sections[sectionIndex].medications = medications;\n  }\n\n  onClickDefaultSettings() {\n    const isClear = confirm('are you sure');\n    if (isClear) {\n      this.clearLocalStorage();\n      this.settings = JSON.parse(JSON.stringify(this.defaultSettings));\n      this.buildServerData();\n      this.toastr.success('Settings were saved');\n      this.cdr.detectChanges();\n    }\n  }\n\n  onDeleteMedication(sectionIndex, medicationId) {\n    const medications = this.settings.sections[sectionIndex].medications;\n    this.settings.sections[sectionIndex].medications = medications.filter(medication => medication.id !== medicationId);\n    this.cdr.detectChanges();\n  }\n\n  buildServerData() {\n    const getCategories = (medications): MedicationsCategory[] => {\n      const categories = {};\n      medications.forEach(medication => {\n        if (!categories[medication.categoryId]) categories[medication.categoryId] = [];\n        categories[medication.categoryId].push(medication);\n      });\n      const ids = Object.keys(categories).map(id => Number(id));\n      return ids.map(id => ({\n        id: id,\n        name: `category ${id}`,\n        color: MedicationCategories.find(item => item.id === id).color,\n        medications: categories[id]\n      }));\n    }\n\n    const getSection = (section, i): MediconSection => {\n      return {\n        id: 1,\n        type: section.type,\n        name: this.text.graphSections[i].title,\n        isDisplay: section.isDisplay,\n        categories: getCategories(section.medications)\n      }\n    }\n\n    const { pivotEpoch, pivotMidnightEpoch } = this.getPivotEpoch(this.settings.pivotTime);\n    const timelineRange = this.getTimelineRange(pivotMidnightEpoch);\n    this.serverData = {\n      pivotTimeGmt: (new Date()).toISOString(),\n      tempPivotTimeGmt: this.timeService.epochToGmt(pivotEpoch),\n      title: {\n        fromTimeGmt: timelineRange.fromTimeGmt,\n        toTimeGmt: timelineRange.toTimeGmt,\n      },\n      resolution: this.settings.resolution,\n      sections: this.settings.sections.map((section, i) => getSection(section, i)),\n      timelineRange\n    }\n  }\n\n  getTimelineRange(pivotMidnightEpoch): MediconServerTimelineRange {\n    const { fromTimeGmt, toTimeGmt } = this.getTimelineRangeInGmt(pivotMidnightEpoch);\n    return {\n      fromTimeGmt,\n      toTimeGmt,\n      days: 12\n    }\n  }\n\n  getPivotEpoch(time: string) {\n    let pivotHour;\n    let pivotMinutes;\n    if (typeof(time) === 'string') {\n      pivotHour = Number(time.substring(0, 2));\n      pivotMinutes = Number(time.substring(3, 5));\n    }\n    const now = Date.now();\n    const localEpoch = this.timeService.getLocalEpoch(now);\n    const pivotMidnightEpoch = this.timeService.getUtcEpoch(localEpoch - (localEpoch % this.timeService.ONE_DAY_IN_MS));\n    const pivotEpoch = pivotMidnightEpoch + (pivotHour * this.timeService.ONE_HOUR_IN_MS) + pivotMinutes * 60000;\n    return { pivotEpoch, pivotMidnightEpoch };\n  }\n\n  getTimelineRangeInGmt(pivotMidnightEpoch) {\n    const localTime = dayjs(pivotMidnightEpoch);\n    const fromTime = localTime.subtract(10, 'day');\n    const fromTimeGmt = this.timeService.epochToGmt(fromTime.valueOf());\n    const toTime = localTime.add(2, 'day');\n    const toTimeGmt = this.timeService.epochToGmt(toTime.valueOf());\n    return { fromTimeGmt, toTimeGmt };\n  }\n\n\n  /*\n    // old - get from/to for paging\n    getTimelineRange(): MediconTimelineRange {\n      const item = TimelineResolutionValues[this.settings.resolution];\n      const pivotEpoch = this.timeService.getMidnightEpoch(this.settings.pivotTime);\n      const roundBy = 60000 * item.minutes;\n      const roundedPivotEpoch = pivotEpoch - (pivotEpoch % roundBy);\n      const roundedPivotLocalEpoch = this.timeService.getLocalEpoch(roundedPivotEpoch);\n      const tlStartEpoch = roundedPivotLocalEpoch - (6 * roundBy);\n      const elEndEpoch = roundedPivotLocalEpoch + (6 * roundBy);\n      const values = [];\n      let interval = 0;\n      for (let time = tlStartEpoch; time <= elEndEpoch; time += roundBy) {\n        if (item.type !== TimeDisplayType.DateTime || ++interval % 2 !== 0) {\n          values.push(this.timeService.getFormattedTime(item.type, time));\n        }\n      }\n      const { fromTimeGmt, toTimeGmt } = this.timeService.getTimelineFromGmtToGmt();\n      return {\n        pivotTime: {\n          epoch: this.timeService.getLocalEpoch(pivotEpoch),\n          iso: this.timeService.getLocalIso(pivotEpoch)\n        },\n        range: {\n          fromTimeGmt,\n          fromTimeEpoch: tlStartEpoch,\n          toTimeGmt,\n          toTimeEpoch: elEndEpoch\n        },\n        days: 12\n      }\n    }\n  */\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$top-bar-height: 3rem;\n\n.top-bar {\n  background: black;\n  color: white;\n  height: $top-bar-height; // var(----top-bar-height);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding-inline-end: 1.5rem;\n  border-bottom: 3px solid black;\n\n  .pivot-time {\n    display: flex;\n    align-items: center;\n    .bi-gear {\n      margin-inline-end: 2rem;\n      margin-inline-start: 1rem;\n    }\n    .settings-action-buttons {\n      padding-inline-end: 3rem;\n      display: inline-flex;\n      justify-content: flex-end;\n      background: white;\n       height: $top-bar-height;\n      margin-inline-end: 2rem;\n      align-items: center;\n      // transition: all 2s linear;\n      button {\n        width: 5rem;\n        margin-inline-start: 2rem;\n        //padding-top: 0;\n        //padding-bottom: 0;\n      }\n    }\n    .pivot-input {\n      margin-inline-start: 0.8rem;\n      margin-inline-end: 2rem;\n      width: 4rem;\n    }\n  }\n\n  select {\n    margin-inline-start: 1rem;\n  }\n}\n\n.data {\n  //padding: 1rem;\n}\n\n.settings {\n  margin-top: 1rem;\n  padding: 1rem;\n  .settings-table {\n    input {\n      margin-inline-start: 1rem;\n      margin-inline-end: 0.5rem;\n      width: 3rem;\n    }\n  }\n  .settings-sections {\n    margin-top: 2rem;\n    .settings-accordion {\n      .panel-heading {\n        background: #337aa7;\n        display: flex;\n        justify-content: space-between;\n      }\n      .btn-link {\n        color: white;\n        text-decoration: none;\n      }\n      .panel-body {\n        background: white;\n        position: relative;\n        padding-top: 0.5rem;\n        .section-display {\n          position: absolute;\n          top: 0.5rem;\n          right: 1rem;\n        }\n      }\n    }\n  }\n}\n\ni {\n  cursor: pointer;\n}\n\n\n/*\n.settings-modal {\n  //background: red !important;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  width: 100vW !important;\n  height: 100vh !important;\n  background: yellow;\n  margin: 0;\n  .modal-content {\n    width: 800px !important;\n  }\n}*/\n",
                    "styleUrl": "./medicon-tester.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "timeService",
                        "type": "TimeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mediconService",
                        "type": "MediconService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timeService",
                        "type": "TimeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mediconService",
                        "type": "MediconService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ng-container *ngIf=\"settings\">\n\n  <header class=\"top-bar\" [dir]=\"direction\">\n    <div class=\"pivot-time\">\n      <div *ngIf=\"isShowSettings\" class=\"settings-action-buttons\">\n        <div>\n          <button type=\"button\" class=\"btn btn-success\" (click)=\"onClickSaveSettings()\">{{text.buttons.save}}</button>\n          <button type=\"button\" class=\"btn btn-danger\" (click)=\"onClickCancelSettings()\">{{text.buttons.cancel}}</button>\n        </div>\n      </div>\n      <i *ngIf=\"!isShowSettings\" class=\"bi bi-gear\" (click)=\"onClickSettings()\"></i>\n      <span>{{text.pivotTime.label}}</span>\n      <input [(ngModel)]=\"settings.pivotTime\" (change)=\"onChangePivotTime($event)\" class=\"pivot-input\">\n      <button (click)=\"onClickResetTime($event)\" type=\"button\" class=\"btn btn-primary\">{{text.pivotTime.button}}</button>\n    </div>\n    <div class=\"default-settings\">\n      <button type=\"button\" class=\"btn btn-warning\" (click)=\"onClickDefaultSettings()\">{{text.buttons.defaultSettings}}</button>\n    </div>\n  </header>\n\n  <div *ngIf=\"!isShowSettings && serverData\" class=\"data\">\n    <app-medicon\n      [direction]=\"direction\"\n      [text]=\"text\"\n      [serverData]=\"serverData\"\n    ></app-medicon>\n  </div>\n\n  <div *ngIf=\"isShowSettings\" class=\"settings\">\n    <table class=\"settings-table\">\n      <tr><td>Hours forward</td><td><input [(ngModel)]=\"settings.hoursForward\" type=\"number\"></td></tr>\n      <tr><td>Hours backward</td><td><input [(ngModel)]=\"settings.hoursBackward\" type=\"number\"></td></tr>\n      <tr><td>Refresh time</td><td><input [(ngModel)]=\"settings.refreshTime\" type=\"number\">minutes</td></tr>\n    </table>\n\n    <accordion class=\"settings-sections\" [isAnimated]=\"true\">\n      <accordion-group *ngFor=\"let section of settings.sections; let i=index\"\n                       heading=\"{{text.graphSections[i].title}}\"\n                       [panelClass]=\"accordionClass\"\n                       [isOpen]=\"true\">\n        <div class=\"form-check section-display\">\n          <input class=\"form-check-input\" type=\"checkbox\" [(ngModel)]=\"section.isDisplay\">&nbsp;&nbsp;Visible\n        </div>\n        <app-medicon-lister\n            [medications]=\"section.medications\"\n            (change)=\"onChangeSectionMedications(i, $event)\"\n            (deleteMedication)=\"onDeleteMedication(i, $event)\"\n        ></app-medicon-lister>\n      </accordion-group>\n    </accordion>\n  </div>\n\n</ng-container>\n"
        },
        {
            "name": "MediconTimelineGraphComponent",
            "id": "component-MediconTimelineGraphComponent-9b86ccb153528c18d7295f07d381e103d0f8d70b940c89053666f24ab619360b729812cdcec616bb4e98e30f710c7f8820965e785ee4b2678a65e8e3076dc5ba",
            "file": "src/app/shared/components/system/medicon-section-timeline/medicon-timeline-graph/medicon-timeline-graph.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-medicon-timeline-graph",
            "styleUrls": [
                "./medicon-timeline-graph.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medicon-timeline-graph.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "categories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "MedicationsCategory[]",
                    "decorators": []
                },
                {
                    "name": "medications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "Medication[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "elRefContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'content'"
                        }
                    ]
                },
                {
                    "name": "elRefGraphLine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'graphLine'"
                        }
                    ]
                },
                {
                    "name": "elRefName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'name'"
                        }
                    ]
                },
                {
                    "name": "ExecutionType",
                    "defaultValue": "ExecutionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "isScrolledByUser",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "mediconService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediconService",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "timelineGraphWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResolution",
                    "args": [
                        {
                            "name": "resolution",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "resolution",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onScroll",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { MedicationsCategory } from '@models/medicon-server-data.model';\nimport { MediconService } from '@shared/components/system/shared/services/medicon.service';\nimport { merge, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { MediconTimelineMetrics } from '@models/timeline-metrics.model';\nimport { Medication } from '@stories/models/medication.model';\nimport { ExecutionType } from '@stories/enums/execution-type.enum';\n\n@Component({\n  selector: 'app-medicon-timeline-graph',\n  templateUrl: './medicon-timeline-graph.component.html',\n  styleUrls: ['./medicon-timeline-graph.component.scss']\n})\nexport class MediconTimelineGraphComponent implements OnInit ,AfterViewInit, OnDestroy {\n  @ViewChild('content') elRefContent;\n  @ViewChild('graphLine') elRefGraphLine;\n  @ViewChild('name') elRefName;\n  @Input() categories: MedicationsCategory[];\n  // @Input() timelineGraphWidth: number;\n  // @Input() timelineRange: MediconTimelineRange;\n  // @Input() timelineValues: MediconTimelineValues;\n  // @Input() set categoryStates(value) {\n  //   this.onChangeCategoryStates(value);\n  // };\n  @Input() medications: Medication[];\n  // readonly PARTS = 12;\n  // ExecutionType = ExecutionType;\n  // subDivisionLines;\n  // pivotTimePositionX;\n  // fullWidth;\n  // hardVerticalWidth;\n  // softVerticalsWidth;\n  // graphLinesCount;\n  // fillerWidth;\n  ExecutionType = ExecutionType;\n  timelineGraphWidth;\n  subscription: Subscription;\n  isScrolledByUser = true;\n\n  constructor(public mediconService: MediconService) {}\n\n  ngOnInit() {\n    // this.mediconService.pivotTime$.subscribe(pivotTime => {\n    //   console.log('pivotTime:', pivotTime, ', metrics:', this.mediconService.timelineMetrics);\n    // });\n\n    // this.mediconService.timelineMetrics$.subscribe((metrics: MediconTimelineMetrics) => {\n    //   console.log('metrics:', metrics, ', this.elRefContent:', this.elRefContent);\n    //   // if (this.elRefContent)\n    // });\n\n\n    // this.fullWidth = 16 / 12 * this.timelineGraphWidth;\n    // const hardVerticalWidth = this.fullWidth / 16;\n    // this.hardVerticalWidth = hardVerticalWidth + 'px 100%';\n    // this.softVerticalsWidth = hardVerticalWidth / 6 + 'px 100%';\n    // this.fillerWidth = this.fullWidth - this.timelineGraphWidth;\n    // this.timelineGraphWidth = this.mediconService.timelineMetrics.window.width; // + 1;\n\n\n\n    // this.calcFullWidth();\n\n    // this.subDivisionLines = this.timelineValues.subDivision - 1;\n    // const pivotTimePositionPct = (this.timelineRange.pivotTime.epoch - this.timelineRange.range.fromTimeEpoch) / (this.timelineRange.range.toTimeEpoch - this.timelineRange.range.fromTimeEpoch)\n    // this.pivotTimePositionX = pivotTimePositionPct * this.timelineWidth;\n  }\n\n  ngAfterViewInit() {\nconsole.log('content width:', this.elRefContent.nativeElement.offsetWidth);\nconsole.log('medications:', this.medications);\n\n\n    const observables = [this.mediconService.timelineMetrics$, this.mediconService.scroll$.pipe(filter(val => val))];\n    // const observables = [this.mediconService.scroll$];\n    // const observables = [this.mediconService.timelineMetrics$];\n    // @ts-ignore\n    this.subscription = merge(...observables).subscribe(val => {\n    // this.subscription = this.mediconService.scroll$.subscribe(val => {\n      // const middleX = (metrics.scrollX + metrics.scrollX + metrics.window.width) / 2;\n      // const middlePct = middleX / metrics.total.width;\n      // const scrollX = metrics.scrollX;\n      // console.log('graph comp., middlePct:', middlePct, ', metrics:', scrollX, metrics.window.width, metrics.total.width);\n      // this.elRefContent.nativeElement.scrollTo(scrollX, 0);\n      console.log('val:', val);\n      console.log('scroll order to:', this.mediconService.timelineMetrics.scrollX);\n      setTimeout(() => {\n        this.isScrolledByUser = false;\n        this.elRefContent.nativeElement.scrollTo(this.mediconService.timelineMetrics.scrollX, 0);\n\n        setTimeout(() => {\n          console.log('actual scroll pos:', this.elRefContent.nativeElement.scrollLeft);\n        }, 10)\n      }, 0);\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) this.subscription.unsubscribe();\n  }\n\n  onResolution(resolution) {\n\n  }\n\n/*  calcFullWidth() {\n    // for 24h\n    this.graphLinesCount = 0;\n    this.categories.forEach(category => {\n      this.graphLinesCount += Math.max(category.medications.length, 1);\n    });\n    // this.medicationsCount += 'px';\n  }*/\n\n//   onChangeCategoryStates(categoryStates) {\n// console.log('categoryStates:', categoryStates);\n//     this.graphLinesCount = 0;\n//     categoryStates.forEach(catState => {\n//       if (!catState.isExpanded) {\n//         this.graphLinesCount++;\n//       } else {\n//         const item = this.categories.find(cat => cat.id === catState.id);\n//         this.graphLinesCount += item.medications.length;\n//       }\n//     })\n//   }\n\n  onScroll(e) {\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    // console.log('e:', e.target.scrollLeft, '/', e.target.scrollWidth);\n    this.mediconService.onScrollTimeline(e.target.scrollLeft, this.isScrolledByUser);\n    this.isScrolledByUser = true;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n:host {\n  width: 100%;\n  margin-right: $medicon-post-timeline-margin-right;\n\n  .content {\n    //background: yellow;\n    // height: 100%;  // calc(100% + 17px);\n     height: calc(var(--medications-count) * #{$medicon-graph-line-height} + #{$medicon-timeline-metrics-height} + var(--scrollbar-width) + 2px);\n    overflow-x: scroll;\n    overflow-y: hidden;\n    //box-sizing: content-box;\n\n    .timeline-metrics {\n      //background: yellow;\n      height: $medicon-timeline-metrics-height;\n      overflow: hidden;\n    }\n\n    .full-width {\n      background: white;\n      height: 100%;\n      position: relative;\n      border-top: 1px solid black;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n      //box-sizing: content-box;\n      .medication-backgrounds, .filler, .hard-verticals, .soft-verticals, .pivot-line, .medications  {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        // display: grid;\n      }\n      .medication-backgrounds {\n        z-index: 1;\n        background-image: linear-gradient(180deg, #e7e7e7 $medicon-graph-line-height, transparent 0);\n        background-size: calc($medicon-graph-line-height * 2) calc($medicon-graph-line-height * 2);\n      }\n      .soft-verticals {\n        z-index: 2;\n        background-image: linear-gradient(90deg, #CECECEFF 1px, transparent 0);\n        background-size: var(--soft-verticals-width);\n      }\n      .hard-verticals {\n        z-index: 3;\n        background-image: linear-gradient(90deg, black 1px, transparent 0);\n        background-size: var(--hard-verticals-width);\n      }\n      .filler {\n        z-index: 4;\n        background: #939393;\n        left: unset;\n        right: 0;\n      }\n      .pivot-line {\n        width: 2px;\n        background: #ff612e;\n        z-index: 5;\n      }\n      .medications {\n        z-index: 6;\n        display: flex;\n        flex-direction: column;\n        .execution {\n          height: $medicon-graph-line-height;\n          display: block;\n        }\n      }\n    }\n  }\n\n}\n\n\n\n/*\n\n.graph-container {\n  position: relative;\n  .graph {\n    border-top: 1px solid gray;\n    border-right: 1px solid gray;\n    border-left: 1px solid gray;\n    height: 100%;\n    flex-grow: 1;\n    display: flex;\n    align-items: center;\n    &.show-bottom-border {\n      border-bottom: 1px solid gray;\n    }\n    &.section-graph-odd {\n      background: white;\n    }\n    &.section-graph-even {\n      background: #eeeeee;\n    }\n    &.last-section-graph {\n      border-bottom: 1px solid gray;\n    }\n    .vertical-lines-container {\n      z-index: 1;\n    }\n    .pivot-line, .execution {\n      position: absolute;\n      height: $medicon-graph-line-height;\n      display: block;\n    }\n    .pivot-line {\n      width: 2px;\n      background: red;\n      z-index: 2;\n    }\n    .execution {\n      z-index: 3;\n      display: flex;\n      align-items: center;\n    }\n  }\n}\n*/\n\n/*\n\n.vertical-lines-container {\n  display: flex;\n  width: 100%;\n  justify-content: space-evenly;\n  .vertical-lines-part-container {\n    display: block;\n    width: 100%;\n    height: $medicon-graph-line-height;\n    position: relative;\n    &:not(:last-child) {\n      border-right: 1px solid black;\n    }\n    .sub-divisions {\n      display: flex;\n      justify-content: space-evenly;\n      .sub-division-line {\n        height: $medicon-graph-line-height;\n        width: 1px;\n        display: block;\n        background: #dddddd;\n      }\n    }\n  }\n}\n*/\n",
                    "styleUrl": "./medicon-timeline-graph.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediconService",
                        "type": "MediconService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "mediconService",
                        "type": "MediconService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"content\" #content\n     *ngIf=\"mediconService.timelineMetrics$ | async; let metrics\"\n     [style.width.px]=\"metrics.window.width\"\n     style=\"--medications-count:{{medications.length}}\"\n     (scroll)=\"onScroll($event)\"\n  >\n  <div class=\"timeline-metrics\" [style.width.px]=\"metrics.total.width\">\n    <app-medicon-timeline-metrics></app-medicon-timeline-metrics>\n  </div>\n\n  <div class=\"full-width\" [style.width.px]=\"metrics.total.width\">\n    <div class=\"soft-verticals\"\n         style=\"--soft-verticals-width:{{metrics.softVerticalWidthStyle}}\">\n    </div>\n    <div class=\"hard-verticals\"\n         style=\"--hard-verticals-width:{{metrics.hardVerticalWidthStyle}}\">\n    </div>\n    <div class=\"medication-backgrounds\"></div>\n    <div class=\"filler\" *ngIf=\"metrics.total.fillerWidth>0\" [style.width.px]=\"metrics.total.fillerWidth\"></div>\n    <div class=\"pivot-line\" [style.left.px]=\"metrics.pivotX\"></div>\n    <div class=\"medications\">\n      <div class=\"execution\" *ngFor=\"let medication of medications\">\n        <ng-container *ngIf=\"medication\">\n          <app-medicon-execution-continuous\n            *ngIf=\"medication.type===ExecutionType.Continuous\"\n            class=\"continuous\"\n            [medication]=\"medication\">\n          </app-medicon-execution-continuous>\n          <app-medicon-execution-periodic\n            *ngIf=\"medication.type===ExecutionType.Periodic\"\n            class=\"periodic\">\n          </app-medicon-execution-periodic>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n\n\n\n\n<!--<app-medicon-scrollbar\n    [timelineRange]=\"timelineRange\"\n    [timelineWidth]=\"timelineWidth\"\n>\n</app-medicon-scrollbar>-->\n\n\n<!--<div class=\"graph-container\" [style.width.px]=\"timelineWidth\">\n  <div class=\"graph\" [class.show-bottom-border]=\"isShowBottomBorder\">\n    <div class=\"vertical-lines-container\">\n      <ng-container *ngFor=\"let part of [].constructor(PARTS); let i=index\">\n        <ng-container\n            [ngTemplateOutlet]=\"verticalLines\"\n            [ngTemplateOutletContext]=\"{isLast: i===PARTS, value: timelineValues.xAxisValues[i]}\"\n        ></ng-container>\n      </ng-container>\n    </div>\n    <div class=\"pivot-line\" [style.left.px]=\"pivotTimePositionX\"></div>\n    <div class=\"execution\">\n      <app-medicon-execution-continuous\n          *ngIf=\"medication.type===ExecutionType.Continuous\"\n          class=\"continuous\"\n          [timelineRange]=\"timelineRange\"\n          [medication]=\"medication\"\n          [timelineWidth]=\"timelineWidth\"\n      ></app-medicon-execution-continuous>\n      <app-medicon-execution-periodic\n          *ngIf=\"medication.type===ExecutionType.Periodic\"\n          class=\"periodic\"\n      ></app-medicon-execution-periodic>\n    </div>\n  </div>\n</div>-->\n\n<!--<ng-template #verticalLines let-isLast=\"isLast\" let-value=\"value\" >\n  <div class=\"vertical-lines-part-container\">\n    <div class=\"vertical-lines-part\">\n      <div class=\"sub-divisions\">\n        <div *ngFor=\"let line of [].constructor(subDivisionLines)\" class=\"sub-division-line\"></div>\n      </div>\n    </div>\n  </div>\n</ng-template>-->\n\n\n"
        },
        {
            "name": "MediconTimelineMetricsComponent",
            "id": "component-MediconTimelineMetricsComponent-94889f42dfd2680940bbd66c39135c917183d334ed971d4943d049555728368a3d304552fb061c221f0cfaa04c758c1cb5538286fabef9b7ef57d5b01894f6f3",
            "file": "src/app/shared/components/system/shared/medicon-timeline-metrics/medicon-timeline-metrics.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-medicon-timeline-metrics",
            "styleUrls": [
                "./medicon-timeline-metrics.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medicon-timeline-metrics.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mediconService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediconService",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "timelineValuesRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "timelineValuesWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MediconService } from '@shared/components/system/shared/services/medicon.service';\n\n@Component({\n  selector: 'app-medicon-timeline-metrics',\n  templateUrl: './medicon-timeline-metrics.component.html',\n  styleUrls: ['./medicon-timeline-metrics.component.scss']\n})\nexport class MediconTimelineMetricsComponent implements OnInit, OnDestroy {\n  timelineValuesWidth;\n  timelineValuesRight;\n  subscription;\n\n  constructor(public mediconService: MediconService) {}\n\n  ngOnInit() {\n    // const valueWidth = this.timelineWidth / (this.timelineValues.xAxisValues.length - 1);\n    // this.timelineValuesWidth = valueWidth * this.timelineValues.xAxisValues.length;\n    // this.timelineValuesRight = -valueWidth / 2;\n\n    // this.subscription = this.mediconService.timelineMetrics$.subscribe((metrics: MediconTimelineMetrics) => {\n    //   // metrics.a =;\n    //   console.log('hardVerticalWidth:', metrics.hardVerticalWidth);\n    //   console.log('xAxisValues.length:', metrics.xAxisValues.length);\n    //   console.log('xAxisValues:', metrics.xAxisValues);\n    // });\n\n    // this.subscription = this.mediconService.xAxisValues$.subscribe((values) => {\n    //   // metrics.a =;\n    //   console.log('hardVerticalWidth:', metrics.hardVerticalWidth);\n    //   console.log('xAxisValues.length:', metrics.xAxisValues.length);\n    //   console.log('xAxisValues:', metrics.xAxisValues);\n    // });\n\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) this.subscription.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n:host {\n  display: inline-block;\n  position: relative;\n  line-height: $medicon-timeline-metrics-height;\n  height: $medicon-timeline-metrics-height;\n  .xaxis-value {\n    position: absolute;\n    text-align: center;\n    // width: var(--hardVerticalWidth);\n  }\n}\n",
                    "styleUrl": "./medicon-timeline-metrics.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mediconService",
                        "type": "MediconService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "mediconService",
                        "type": "MediconService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "\n<ng-container *ngIf=\"mediconService.xAxisValues$ | async as values\">\n  <div *ngFor=\"let xAxis of values\" class=\"xaxis-value\"\n       [style.width.px]=\"xAxis.width\"\n       [style.left.px]=\"xAxis.left\"\n  >{{xAxis.value}}</div>\n</ng-container>\n\n\n<!--<ng-container *ngIf=\"mediconService.timelineMetrics$ | async as metrics\">\n  <ng-container *ngIf=\"mediconService.xAxisValues$ | async as values\">\n    <div class=\"x-axis-timeline-metrics\" style=\"&#45;&#45;hardVerticalWidth: {{metrics.hardVerticalWidth}}px\">\n      <div *ngFor=\"let value of values\">{{value}}</div>\n    </div>\n  </ng-container>\n</ng-container>-->\n\n\n<!--\n<ng-container *ngIf=\"mediconService.timelineMetrics$ | async as metrics\">\n  <div class=\"x-axis-timeline-metrics\" style=\"&#45;&#45;hardVerticalWidth: {{metrics.hardVerticalWidth}}px\">\n    <div *ngFor=\"let value of metrics.xAxisValues\">{{value}}</div>\n  </div>\n</ng-container>\n-->\n\n\n\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-f4971f87d84d7a4d0674e4ac7fcd2fc3e2e0d12bad116ec787d93b61546402b840827fa1f00a1fa9a1f1332674d1dcba4452d45637837d2e53b7eb28aa9d5cb9",
            "file": "src/app/shared/components/page/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from '@models/user.model';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-b1b01d01175d4bfbedd6a1cc192662a21bd003313bba8d19d3158f8869bc5bb97d1494015a94e86b5347ef8d80aad9fabadb4652f2e42fe211552a2228cef923",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { SharedModule } from '@shared/shared.module';\nimport { AccordionModule } from 'ngx-bootstrap/accordion';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { SortableModule } from 'ngx-bootstrap/sortable';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    SharedModule,\n\n    // bootstrap\n    ModalModule.forRoot(),\n    AccordionModule.forRoot(),\n    ButtonsModule.forRoot(),\n    SortableModule.forRoot(),\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-78922b3ae99d2c5249b333980bd5afde1b120b2cc6fedfd41b8b2cc90f279797cb4b22e183bf7e1d1dfab8c6100e77e7812c110234d81f866f544f28a3e18b15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-76a8e5430e85039d08a90abd0e6b1c283d56b14fd64a09868f2cfa22e7f13ef91d0cc2b32d8ea7d529d63077dd8486a5e67ffe24b61aa0ccfcd9b568370c34cf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxEchartsModule } from 'ngx-echarts';\nimport { GraphLinesComponent } from './components/graphs/graph-lines.component';\nimport { GraphPieComponent } from './components/graphs/graph-pie.component';\nimport { GraphTimelineCategoryComponent } from '@shared/components/graphs/graph-timeline-category.component';\nimport { GraphTimelineComponent } from '@shared/components/graphs/graph-timeline.component';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { AccordionModule } from 'ngx-bootstrap/accordion';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { SortableModule } from 'ngx-bootstrap/sortable';\nimport { ToastrModule } from 'ngx-toastr';\nimport { MediconComponent } from '@shared/components/system/medicon/medicon.component';\nimport { MediconCategoryComponent } from '@shared/components/system/medicon-section-timeline/medicon-category/medicon-category.component';\nimport { MediconCategoryItemComponent } from '@shared/components/system/medicon-section-timeline/medicon-category-item/medicon-category-item.component';\nimport { MediconSectionContainerComponent } from '@shared/components/system/medicon-section-container/medicon-section-container.component';\nimport { MediconSectionTimelineComponent } from '@shared/components/system/medicon-section-timeline/medicon-section-timeline.component';\nimport { MediconTimelineMetricsComponent } from '@shared/components/system/shared/medicon-timeline-metrics/medicon-timeline-metrics.component';\nimport { MediconExecutionPeriodicComponent } from './components/system/medicon-section-timeline/medicon-execution-periodic/medicon-execution-periodic.component';\nimport { MediconExecutionContinuousComponent } from './components/system/medicon-section-timeline/medicon-execution-continuous/medicon-execution-continuous.component';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\nimport { PopoverModule } from 'ngx-bootstrap/popover';\nimport { MediconIconComponent } from './components/system/shared/medicon-icon/medicon-icon.component';\nimport { MediconResolutionComponent } from './components/system/shared/medicon-resolution/medicon-resolution.component';\nimport { MediconScrollbarComponent } from './components/system/shared/medicon-scrollbar/medicon-scrollbar.component';\nimport { MediconTimelineGraphComponent } from './components/system/medicon-section-timeline/medicon-timeline-graph/medicon-timeline-graph.component';\n\nconst declarations = [\n  GraphLinesComponent,\n  GraphPieComponent,\n  GraphTimelineComponent,\n  GraphTimelineCategoryComponent,\n  MediconComponent,\n  MediconCategoryComponent,\n  MediconCategoryItemComponent,\n  MediconExecutionPeriodicComponent,\n  MediconExecutionContinuousComponent,\n  MediconIconComponent,\n  MediconResolutionComponent,\n  MediconScrollbarComponent,\n  MediconSectionContainerComponent,\n  MediconSectionTimelineComponent,\n  MediconTimelineGraphComponent,\n  MediconTimelineMetricsComponent\n];\n\nconst modules = [\n  CommonModule,\n  BrowserModule,\n  FormsModule,\n  BrowserAnimationsModule,\n];\n\nconst importModules = [\n  // bootstrap\n  ModalModule,\n  AccordionModule,\n  ButtonsModule,\n  PopoverModule.forRoot(),\n  SortableModule,\n  TooltipModule.forRoot(),\n  // echarts\n  NgxEchartsModule.forRoot({\n    echarts: () => import('echarts')\n  }),\n  // toastr\n  ToastrModule.forRoot({\n    timeOut: 2000\n  })\n];\n\nconst exportModules = [\n  // bootstrap\n  ModalModule,\n  AccordionModule,\n  ButtonsModule,\n  PopoverModule,\n  SortableModule,\n  TooltipModule,\n  // echarts\n  NgxEchartsModule,\n  // toastr\n  ToastrModule\n];\n\n@NgModule({\n  declarations,\n  imports: [\n    ...modules,\n    ...importModules\n  ],\n  exports: [\n    ...declarations,\n    ...modules,\n    exportModules\n  ]\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GraphLinesComponent"
                        },
                        {
                            "name": "GraphPieComponent"
                        },
                        {
                            "name": "GraphTimelineCategoryComponent"
                        },
                        {
                            "name": "GraphTimelineComponent"
                        },
                        {
                            "name": "MediconCategoryComponent"
                        },
                        {
                            "name": "MediconCategoryItemComponent"
                        },
                        {
                            "name": "MediconComponent"
                        },
                        {
                            "name": "MediconExecutionContinuousComponent"
                        },
                        {
                            "name": "MediconExecutionPeriodicComponent"
                        },
                        {
                            "name": "MediconIconComponent"
                        },
                        {
                            "name": "MediconResolutionComponent"
                        },
                        {
                            "name": "MediconScrollbarComponent"
                        },
                        {
                            "name": "MediconSectionContainerComponent"
                        },
                        {
                            "name": "MediconSectionTimelineComponent"
                        },
                        {
                            "name": "MediconTimelineGraphComponent"
                        },
                        {
                            "name": "MediconTimelineMetricsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GraphLinesComponent"
                        },
                        {
                            "name": "GraphPieComponent"
                        },
                        {
                            "name": "GraphTimelineCategoryComponent"
                        },
                        {
                            "name": "GraphTimelineComponent"
                        },
                        {
                            "name": "MediconCategoryComponent"
                        },
                        {
                            "name": "MediconCategoryItemComponent"
                        },
                        {
                            "name": "MediconComponent"
                        },
                        {
                            "name": "MediconExecutionContinuousComponent"
                        },
                        {
                            "name": "MediconExecutionPeriodicComponent"
                        },
                        {
                            "name": "MediconIconComponent"
                        },
                        {
                            "name": "MediconResolutionComponent"
                        },
                        {
                            "name": "MediconScrollbarComponent"
                        },
                        {
                            "name": "MediconSectionContainerComponent"
                        },
                        {
                            "name": "MediconSectionTimelineComponent"
                        },
                        {
                            "name": "MediconTimelineGraphComponent"
                        },
                        {
                            "name": "MediconTimelineMetricsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "עברית",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/graphs/medicon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ConcentratedDisplayStoryTemplate",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "declarations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  GraphLinesComponent,\n  GraphPieComponent,\n  GraphTimelineComponent,\n  GraphTimelineCategoryComponent,\n  MediconComponent,\n  MediconCategoryComponent,\n  MediconCategoryItemComponent,\n  MediconExecutionPeriodicComponent,\n  MediconExecutionContinuousComponent,\n  MediconIconComponent,\n  MediconResolutionComponent,\n  MediconScrollbarComponent,\n  MediconSectionContainerComponent,\n  MediconSectionTimelineComponent,\n  MediconTimelineGraphComponent,\n  MediconTimelineMetricsComponent\n]"
            },
            {
                "name": "defaultSettings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/const/default-settings.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Settings",
                "defaultValue": "{\n  languageCode: 'en',\n  resolution: TimelineResolution.Hours1,\n  pivotTime: '10:00',\n  hoursForward: 14,\n  hoursBackward: 5,\n  refreshTime: 2,\n  locale: 'he-il',\n  sections: [\n    {\n      isDisplay: true,\n      type: MediconSectionType.Timeline,\n      medications: [\n        { id: 10, name: 'Medication 10', categoryId: 1, type: ExecutionType.Continuous, timingType: null, times: ['', '', ''], orderTime: 30, executionTime: 50, duration: 100 },\n        { id: 11, name: 'Medication 11', categoryId: 1, type: ExecutionType.Periodic, timingType: null, times: ['08:00', '14:00', '20:00'], orderTime: 0, executionTime: 0, duration: 0 },\n        { id: 12, name: 'Medication 15', categoryId: 1, type: ExecutionType.Continuous, timingType: null, times: ['', '', ''], orderTime: 20, executionTime: 0, duration: 100 },\n        { id: 20, name: 'Medication 22', categoryId: 2, type: ExecutionType.Periodic, timingType: null, times: ['09:00', '10:00', '11:00'], orderTime: 0, executionTime: 0, duration: 0 },\n        { id: 30, name: 'Medication 32', categoryId: 3, type: ExecutionType.Periodic, timingType: null, times: ['11:00', '11:10', '11:20'], orderTime: 0, executionTime: 0, duration: 0 },\n        { id: 31, name: 'Medication 31', categoryId: 3, type: ExecutionType.Continuous, timingType: null, times: ['', '', ''], orderTime: 10, executionTime: 30, duration: 200 },\n      ]\n    }\n  ]\n}"
            },
            {
                "name": "English",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/graphs/medicon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ConcentratedDisplayStoryTemplate",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "exportModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  // bootstrap\n  ModalModule,\n  AccordionModule,\n  ButtonsModule,\n  PopoverModule,\n  SortableModule,\n  TooltipModule,\n  // echarts\n  NgxEchartsModule,\n  // toastr\n  ToastrModule\n]"
            },
            {
                "name": "importModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  // bootstrap\n  ModalModule,\n  AccordionModule,\n  ButtonsModule,\n  PopoverModule.forRoot(),\n  SortableModule,\n  TooltipModule.forRoot(),\n  // echarts\n  NgxEchartsModule.forRoot({\n    echarts: () => import('echarts')\n  }),\n  // toastr\n  ToastrModule.forRoot({\n    timeOut: 2000\n  })\n]"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MedicationCategories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/const/medication-categories.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { id: 1, label: 'Category 1', color: '#F72585' },\n  { id: 2, label: 'Category 2', color: '#AE2012' },\n  { id: 3, label: 'Category 3', color: '#3A0CA3' },\n  { id: 4, label: 'Category 4', color: '#EE9B00' },\n  { id: 5, label: 'Category 5', color: '#4CC9F0' },\n  { id: 6, label: 'Category 6', color: '#7209B7' },\n  { id: 7, label: 'Category 7', color: '#4361EE' },\n  { id: 8, label: 'Category 8', color: '#9B2226' },\n  { id: 9, label: 'Category 9', color: '#000000' }\n]"
            },
            {
                "name": "medications",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/const/medications.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { id: 10, name: 'Medication 10', categoryId: 1 },\n  { id: 11, name: 'Medication 11', categoryId: 1 },\n  { id: 12, name: 'Medication 12', categoryId: 1 },\n  { id: 13, name: 'Medication 13', categoryId: 1 },\n  { id: 14, name: 'Medication 14', categoryId: 1 },\n  { id: 15, name: 'Medication 15', categoryId: 1 },\n  { id: 16, name: 'Medication 16', categoryId: 1 },\n  { id: 17, name: 'Medication 17', categoryId: 1 },\n  { id: 18, name: 'Medication 18', categoryId: 1 },\n  { id: 19, name: 'Medication 19', categoryId: 1 },\n\n  { id: 20, name: 'Medication 20', categoryId: 2 },\n  { id: 21, name: 'Medication 21', categoryId: 2 },\n  { id: 22, name: 'Medication 22', categoryId: 2 },\n  { id: 23, name: 'Medication 23', categoryId: 2 },\n  { id: 24, name: 'Medication 24', categoryId: 2 },\n  { id: 25, name: 'Medication 25', categoryId: 2 },\n  { id: 26, name: 'Medication 26', categoryId: 2 },\n  { id: 27, name: 'Medication 27', categoryId: 2 },\n  { id: 28, name: 'Medication 28', categoryId: 2 },\n  { id: 29, name: 'Medication 29', categoryId: 2 },\n\n  { id: 30, name: 'Medication 30', categoryId: 3 },\n  { id: 31, name: 'Medication 31', categoryId: 3 },\n  { id: 32, name: 'Medication 32', categoryId: 3 },\n  { id: 33, name: 'Medication 33', categoryId: 3 },\n  { id: 34, name: 'Medication 34', categoryId: 3 },\n  { id: 35, name: 'Medication 35', categoryId: 3 },\n  { id: 36, name: 'Medication 36', categoryId: 3 },\n  { id: 37, name: 'Medication 37', categoryId: 3 },\n  { id: 38, name: 'Medication 38', categoryId: 3 },\n  { id: 39, name: 'Medication 39', categoryId: 3 },\n\n  { id: 40, name: 'Medication 40', categoryId: 4 },\n  { id: 41, name: 'Medication 41', categoryId: 4 },\n  { id: 42, name: 'Medication 42', categoryId: 4 },\n  { id: 43, name: 'Medication 43', categoryId: 4 },\n  { id: 44, name: 'Medication 44', categoryId: 4 },\n  { id: 45, name: 'Medication 45', categoryId: 4 },\n  { id: 46, name: 'Medication 46', categoryId: 4 },\n  { id: 47, name: 'Medication 47', categoryId: 4 },\n  { id: 48, name: 'Medication 48', categoryId: 4 },\n  { id: 49, name: 'Medication 49', categoryId: 4 },\n]"
            },
            {
                "name": "MediconLegendIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/consts/medicon-legend-icons.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { type: MediconLegendIconType.Order, size: 0.9, stroke: 'black', column: 0 },\n  { type: MediconLegendIconType.Execution, size: 0.95, stroke: 'black', column: 0 },\n  { type: MediconLegendIconType.RateChangeOrder, size: 0.9, stroke: '#2eaafe', column: 0 },\n  { type: MediconLegendIconType.Report, size: 0.95, stroke: 'black', column: 0 },\n  { type: MediconLegendIconType.NotAdministered, size: 0.95, stroke: '#e24664', column: 0 },\n  { type: MediconLegendIconType.NotExecuted, size: 0.95, stroke: '#e24664', column: 0 },\n\n  { type: MediconLegendIconType.RateChange, size: 1, stroke: 'black', column: 1 },\n  { type: MediconLegendIconType.DosageDecrease, size: 0.7, stroke: '#2eaafe', column: 1 },\n  { type: MediconLegendIconType.DosageIncrease, size: 1, stroke: '#2eaafe', column: 1 },\n  { type: MediconLegendIconType.Hold, size: 1, stroke: 'black', fill: '#ffd700', column: 1 },\n  { type: MediconLegendIconType.CancelHold, size: 1, stroke: 'black', fill: '#7cfc00', column: 1 },\n  { type: MediconLegendIconType.Stop, size: 1.15, stroke: 'black', column: 1 },\n  { type: MediconLegendIconType.ExecutionTime, size: 0.9, stroke: 'black', column: 1 }\n]"
            },
            {
                "name": "mockDataGraphLines",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mock-data/mock-data-graph-lines.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  metadata: {\n    type: GraphType.LinesRegular,\n    height: '600px'\n  },\n  data: {\n    title: {\n      text: 'Lines Graph Example',\n    },\n    legend: {\n      data: ['Email', 'Union Ads', 'Video Ads', 'Direct', 'Search Engine']\n    },\n    xAxis: {\n      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    },\n    series: {\n      data: [\n        { name: 'Email', data: [120, 132, 101, 134, 90, 230, 210] },\n        { name: 'Union Ads', data: [220, 182, 191, 234, 290, 330, 310] },\n        { name: 'Video Ads', data: [150, 232, 201, 154, 190, 330, 410] },\n        { name: 'Direct', data: [320, 332, 301, 334, 390, 330, 320] },\n        { name: 'Search Engine', data: [820, 932, 901, 934, 1290, 1330, 1320] }\n      ]\n    }\n  }\n}"
            },
            {
                "name": "mockDataGraphPie",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/mock-data/mock-data-graph-pie.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  metadata: {\n    type: GraphType.LinesRegular,\n    height: '600px'\n  },\n  data: {\n    title: {\n      text: 'Pie Graph Example'\n    },\n    legend: {\n      data: ['Direct Visit', 'Union Ads', 'Search Engine']\n    },\n    series: {\n      data: [\n        { name: 'Direct Visit', value: 335 },\n        { name: 'Union Ads', value: 234 },\n        { name: 'Search Engine', value: 1548 }\n      ]\n    }\n  }\n}"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  CommonModule,\n  BrowserModule,\n  FormsModule,\n  BrowserAnimationsModule,\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Regular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/graphs/lines.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "GraphStoryTemplate",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Regular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/graphs/pie.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "GraphStoryTemplate",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/examples/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/graphs/lines.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<GraphLinesComponent>",
                "defaultValue": "(args: GraphLinesComponent) => ({ props: args })"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/graphs/medicon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MediconTesterComponent>",
                "defaultValue": "(args: MediconTesterComponent) => ({ props: args })"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/graphs/pie.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<GraphPieComponent>",
                "defaultValue": "(args: GraphPieComponent) => ({ props: args })"
            },
            {
                "name": "textEn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/const/text-en.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{\n  direction: 'ltr',\n  text: {\n    buttons: {\n      save: 'Save',\n      cancel: 'cancel',\n      defaultSettings: 'Reset to Default Settings'\n    },\n    pivotTime: {\n      label: 'Pivot time',\n      button: 'Reset Time'\n    },\n    resolution: {\n      label: 'Resolution',\n      options: [\n        { value: '1m', label: '1m' },\n        { value: '2m', label: '2m' },\n        { value: '5m', label: '5m' },\n        { value: '15m', label: '15m' },\n        { value: '30m', label: '30m' },\n        { value: '1h', label: '1h' },\n        { value: '2h', label: '2h' },\n        { value: '4h', label: '4h' },\n        { value: '8h', label: '8h' },\n        { value: '24h', label: '24h' }\n      ]\n    },\n    graphSections: [\n      { title: 'Medications' },\n      { title: 'Operations' },\n      { title: 'Metrics' },\n      { title: 'Table Metrics' }\n    ],\n    medicon: {\n      legend: 'Legend',\n      icons: {\n        [MediconLegendIconType.Order]: 'Order',\n        [MediconLegendIconType.RateChangeOrder]: 'Rate change order',\n        [MediconLegendIconType.Execution]: 'Execution',\n        [MediconLegendIconType.Report]: 'Report',\n        [MediconLegendIconType.NotAdministered]: 'Not Administered',\n        [MediconLegendIconType.NotExecuted]: 'Not Executed',\n        [MediconLegendIconType.RateChange]: 'Rate Change',\n        [MediconLegendIconType.DosageDecrease]: 'Dosage Decrease',\n        [MediconLegendIconType.DosageIncrease]: 'Dosage Increase',\n        [MediconLegendIconType.Hold]: 'Hold',\n        [MediconLegendIconType.CancelHold]: 'Cancel hold',\n        [MediconLegendIconType.Stop]: 'Stop',\n        [MediconLegendIconType.ExecutionTime]: 'planned Execution time'\n      }\n    }\n  }\n} as const"
            },
            {
                "name": "textHe",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/const/text-he.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "{\n  direction: 'rtl',\n  text: {\n    buttons: {\n      save: 'שמירה',\n      cancel: 'ביטול',\n      defaultSettings: 'איפוס הגדרות'\n    },\n    pivotTime: {\n      label: 'שעת ציר',\n      button: 'זמן נוכחי'\n    },\n    resolution: {\n      label: 'רזולוציה',\n      options: [\n        { value: '1m', label: 'ד1' },\n        { value: '2m', label: '2ד' },\n        { value: '5m', label: '5ד' },\n        { value: '15m', label: '15ד' },\n        { value: '30m', label: '30ד' },\n        { value: '1h', label: 'ש1' },\n        { value: '2h', label: '2ש' },\n        { value: '4h', label: '4ש' },\n        { value: '8h', label: '8ש' },\n        { value: '24h', label: '24ש' }\n      ]\n    },\n    graphSections: [\n      { title: 'תרופות' },\n      { title: 'פעולות' },\n      { title: 'מדדים' },\n      { title: 'מדדים בטבלה' }\n    ],\n    medicon: {\n      legend: 'מקרא',\n      icons: {\n        [MediconLegendIconType.Order]: 'הוראה',\n        [MediconLegendIconType.RateChangeOrder]: 'הוראה לשינוי קצב',\n        [MediconLegendIconType.Execution]: 'ביצוע',\n        [MediconLegendIconType.Report]: 'דיווח',\n        [MediconLegendIconType.NotAdministered]: 'אי מתן',\n        [MediconLegendIconType.NotExecuted]: 'לא בוצע',\n        [MediconLegendIconType.RateChange]: 'שינוי קצב',\n        [MediconLegendIconType.DosageDecrease]: 'הורדת מינון',\n        [MediconLegendIconType.DosageIncrease]: 'העלאת מינון',\n        [MediconLegendIconType.Hold]: 'השהיה',\n        [MediconLegendIconType.CancelHold]: 'ביטול השהיה',\n        [MediconLegendIconType.Stop]: 'עצירה',\n        [MediconLegendIconType.ExecutionTime]: 'מועד ביצוע / החלפת שקית מתוכנן'\n      }\n    }\n  }\n} as const"
            },
            {
                "name": "TimelineResolutionValues",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/consts/timeline-resolution-values.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  [TimelineResolution.Minutes1]: { minutes: 1, type: TimeDisplayType.Time, softVerticals: 6, interval: 1 },\n  [TimelineResolution.Minutes2]: { minutes: 2, type: TimeDisplayType.Time, softVerticals: 2, interval: 1 },\n  [TimelineResolution.Minutes5]: { minutes: 5, type: TimeDisplayType.Time, softVerticals: 5, interval: 1 },\n  [TimelineResolution.Minutes15]: { minutes: 15, type: TimeDisplayType.Time, softVerticals: 3, interval: 1 },\n  [TimelineResolution.Minutes30]: { minutes: 30, type: TimeDisplayType.Time, softVerticals: 3, interval: 1 },\n  [TimelineResolution.Hours1]: { minutes: 60, type: TimeDisplayType.Time, softVerticals: 6, interval: 1 },\n  [TimelineResolution.Hours2]: { minutes: 120, type: TimeDisplayType.Time, softVerticals: 2, interval: 1 },\n  [TimelineResolution.Hours4]: { minutes: 240, type: TimeDisplayType.DateTime, softVerticals: 4, interval: 2 },\n  [TimelineResolution.Hours8]: { minutes: 480, type: TimeDisplayType.DateTime, softVerticals: 8, interval: 2, fillerColumns: 3 },\n  [TimelineResolution.Hours24]: { minutes: 1440, type: TimeDisplayType.Date, softVerticals: 6, interval: 1, fillerColumns: 5 }\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Direction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"rtl\" | \"ltr\"",
                "file": "src/stories/models/direction.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "EChartsOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "echarts.EChartsOption",
                "file": "src/app/shared/base-classes/base-graph.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "GraphSeriesDataLines",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Array<literal type>",
                "file": "src/app/shared/models/graph-data.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "GraphSeriesDataPie",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Array<literal type>",
                "file": "src/app/shared/models/graph-data.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [
            {
                "name": "ExecutionType",
                "childs": [
                    {
                        "name": "Periodic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Periodic"
                    },
                    {
                        "name": "Continuous",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Continuous"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/stories/enums/execution-type.enum.ts"
            },
            {
                "name": "GraphType",
                "childs": [
                    {
                        "name": "LinesRegular",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "LinesRegular"
                    },
                    {
                        "name": "PieRegular",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PieRegular"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/graph-type.enum.ts"
            },
            {
                "name": "MediconLegendIconType",
                "childs": [
                    {
                        "name": "Order",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Order"
                    },
                    {
                        "name": "Execution",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Execution"
                    },
                    {
                        "name": "RateChangeOrder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RateChangeOrder"
                    },
                    {
                        "name": "Report",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Report"
                    },
                    {
                        "name": "NotAdministered",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NotAdministered"
                    },
                    {
                        "name": "NotExecuted",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NotExecuted"
                    },
                    {
                        "name": "RateChange",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "RateChange"
                    },
                    {
                        "name": "DosageDecrease",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DosageDecrease"
                    },
                    {
                        "name": "DosageIncrease",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DosageIncrease"
                    },
                    {
                        "name": "Hold",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Hold"
                    },
                    {
                        "name": "CancelHold",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CancelDelay"
                    },
                    {
                        "name": "Stop",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Stop"
                    },
                    {
                        "name": "ExecutionTime",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ExecutionTime"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/medicon-legend-icon-type.enum.ts"
            },
            {
                "name": "MediconSectionType",
                "childs": [
                    {
                        "name": "Timeline",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Timeline"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/medicon-section-type.enum.ts"
            },
            {
                "name": "TimeDisplayType",
                "childs": [
                    {
                        "name": "Time",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Time"
                    },
                    {
                        "name": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Date"
                    },
                    {
                        "name": "DateTime",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DateTime"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/time-display-type.enum.ts"
            },
            {
                "name": "TimelineResolution",
                "childs": [
                    {
                        "name": "Minutes1",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1m"
                    },
                    {
                        "name": "Minutes2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "2m"
                    },
                    {
                        "name": "Minutes5",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "5m"
                    },
                    {
                        "name": "Minutes15",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "15m"
                    },
                    {
                        "name": "Minutes30",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "30m"
                    },
                    {
                        "name": "Hours1",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1h"
                    },
                    {
                        "name": "Hours2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "2h"
                    },
                    {
                        "name": "Hours4",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "4h"
                    },
                    {
                        "name": "Hours8",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "8h"
                    },
                    {
                        "name": "Hours24",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "24h"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/enums/timeline-resolution.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/stories/graphs/medicon.stories.ts": [
                {
                    "name": "עברית",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/graphs/medicon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConcentratedDisplayStoryTemplate",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "English",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/graphs/medicon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConcentratedDisplayStoryTemplate",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/graphs/medicon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MediconTesterComponent>",
                    "defaultValue": "(args: MediconTesterComponent) => ({ props: args })"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/shared/shared.module.ts": [
                {
                    "name": "declarations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  GraphLinesComponent,\n  GraphPieComponent,\n  GraphTimelineComponent,\n  GraphTimelineCategoryComponent,\n  MediconComponent,\n  MediconCategoryComponent,\n  MediconCategoryItemComponent,\n  MediconExecutionPeriodicComponent,\n  MediconExecutionContinuousComponent,\n  MediconIconComponent,\n  MediconResolutionComponent,\n  MediconScrollbarComponent,\n  MediconSectionContainerComponent,\n  MediconSectionTimelineComponent,\n  MediconTimelineGraphComponent,\n  MediconTimelineMetricsComponent\n]"
                },
                {
                    "name": "exportModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  // bootstrap\n  ModalModule,\n  AccordionModule,\n  ButtonsModule,\n  PopoverModule,\n  SortableModule,\n  TooltipModule,\n  // echarts\n  NgxEchartsModule,\n  // toastr\n  ToastrModule\n]"
                },
                {
                    "name": "importModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  // bootstrap\n  ModalModule,\n  AccordionModule,\n  ButtonsModule,\n  PopoverModule.forRoot(),\n  SortableModule,\n  TooltipModule.forRoot(),\n  // echarts\n  NgxEchartsModule.forRoot({\n    echarts: () => import('echarts')\n  }),\n  // toastr\n  ToastrModule.forRoot({\n    timeOut: 2000\n  })\n]"
                },
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  CommonModule,\n  BrowserModule,\n  FormsModule,\n  BrowserAnimationsModule,\n]"
                }
            ],
            "src/stories/const/default-settings.const.ts": [
                {
                    "name": "defaultSettings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/const/default-settings.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Settings",
                    "defaultValue": "{\n  languageCode: 'en',\n  resolution: TimelineResolution.Hours1,\n  pivotTime: '10:00',\n  hoursForward: 14,\n  hoursBackward: 5,\n  refreshTime: 2,\n  locale: 'he-il',\n  sections: [\n    {\n      isDisplay: true,\n      type: MediconSectionType.Timeline,\n      medications: [\n        { id: 10, name: 'Medication 10', categoryId: 1, type: ExecutionType.Continuous, timingType: null, times: ['', '', ''], orderTime: 30, executionTime: 50, duration: 100 },\n        { id: 11, name: 'Medication 11', categoryId: 1, type: ExecutionType.Periodic, timingType: null, times: ['08:00', '14:00', '20:00'], orderTime: 0, executionTime: 0, duration: 0 },\n        { id: 12, name: 'Medication 15', categoryId: 1, type: ExecutionType.Continuous, timingType: null, times: ['', '', ''], orderTime: 20, executionTime: 0, duration: 100 },\n        { id: 20, name: 'Medication 22', categoryId: 2, type: ExecutionType.Periodic, timingType: null, times: ['09:00', '10:00', '11:00'], orderTime: 0, executionTime: 0, duration: 0 },\n        { id: 30, name: 'Medication 32', categoryId: 3, type: ExecutionType.Periodic, timingType: null, times: ['11:00', '11:10', '11:20'], orderTime: 0, executionTime: 0, duration: 0 },\n        { id: 31, name: 'Medication 31', categoryId: 3, type: ExecutionType.Continuous, timingType: null, times: ['', '', ''], orderTime: 10, executionTime: 30, duration: 200 },\n      ]\n    }\n  ]\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/examples/button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/examples/header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/examples/page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/examples/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/const/medication-categories.const.ts": [
                {
                    "name": "MedicationCategories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/const/medication-categories.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { id: 1, label: 'Category 1', color: '#F72585' },\n  { id: 2, label: 'Category 2', color: '#AE2012' },\n  { id: 3, label: 'Category 3', color: '#3A0CA3' },\n  { id: 4, label: 'Category 4', color: '#EE9B00' },\n  { id: 5, label: 'Category 5', color: '#4CC9F0' },\n  { id: 6, label: 'Category 6', color: '#7209B7' },\n  { id: 7, label: 'Category 7', color: '#4361EE' },\n  { id: 8, label: 'Category 8', color: '#9B2226' },\n  { id: 9, label: 'Category 9', color: '#000000' }\n]"
                }
            ],
            "src/stories/const/medications.const.ts": [
                {
                    "name": "medications",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/const/medications.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { id: 10, name: 'Medication 10', categoryId: 1 },\n  { id: 11, name: 'Medication 11', categoryId: 1 },\n  { id: 12, name: 'Medication 12', categoryId: 1 },\n  { id: 13, name: 'Medication 13', categoryId: 1 },\n  { id: 14, name: 'Medication 14', categoryId: 1 },\n  { id: 15, name: 'Medication 15', categoryId: 1 },\n  { id: 16, name: 'Medication 16', categoryId: 1 },\n  { id: 17, name: 'Medication 17', categoryId: 1 },\n  { id: 18, name: 'Medication 18', categoryId: 1 },\n  { id: 19, name: 'Medication 19', categoryId: 1 },\n\n  { id: 20, name: 'Medication 20', categoryId: 2 },\n  { id: 21, name: 'Medication 21', categoryId: 2 },\n  { id: 22, name: 'Medication 22', categoryId: 2 },\n  { id: 23, name: 'Medication 23', categoryId: 2 },\n  { id: 24, name: 'Medication 24', categoryId: 2 },\n  { id: 25, name: 'Medication 25', categoryId: 2 },\n  { id: 26, name: 'Medication 26', categoryId: 2 },\n  { id: 27, name: 'Medication 27', categoryId: 2 },\n  { id: 28, name: 'Medication 28', categoryId: 2 },\n  { id: 29, name: 'Medication 29', categoryId: 2 },\n\n  { id: 30, name: 'Medication 30', categoryId: 3 },\n  { id: 31, name: 'Medication 31', categoryId: 3 },\n  { id: 32, name: 'Medication 32', categoryId: 3 },\n  { id: 33, name: 'Medication 33', categoryId: 3 },\n  { id: 34, name: 'Medication 34', categoryId: 3 },\n  { id: 35, name: 'Medication 35', categoryId: 3 },\n  { id: 36, name: 'Medication 36', categoryId: 3 },\n  { id: 37, name: 'Medication 37', categoryId: 3 },\n  { id: 38, name: 'Medication 38', categoryId: 3 },\n  { id: 39, name: 'Medication 39', categoryId: 3 },\n\n  { id: 40, name: 'Medication 40', categoryId: 4 },\n  { id: 41, name: 'Medication 41', categoryId: 4 },\n  { id: 42, name: 'Medication 42', categoryId: 4 },\n  { id: 43, name: 'Medication 43', categoryId: 4 },\n  { id: 44, name: 'Medication 44', categoryId: 4 },\n  { id: 45, name: 'Medication 45', categoryId: 4 },\n  { id: 46, name: 'Medication 46', categoryId: 4 },\n  { id: 47, name: 'Medication 47', categoryId: 4 },\n  { id: 48, name: 'Medication 48', categoryId: 4 },\n  { id: 49, name: 'Medication 49', categoryId: 4 },\n]"
                }
            ],
            "src/app/shared/consts/medicon-legend-icons.const.ts": [
                {
                    "name": "MediconLegendIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/consts/medicon-legend-icons.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { type: MediconLegendIconType.Order, size: 0.9, stroke: 'black', column: 0 },\n  { type: MediconLegendIconType.Execution, size: 0.95, stroke: 'black', column: 0 },\n  { type: MediconLegendIconType.RateChangeOrder, size: 0.9, stroke: '#2eaafe', column: 0 },\n  { type: MediconLegendIconType.Report, size: 0.95, stroke: 'black', column: 0 },\n  { type: MediconLegendIconType.NotAdministered, size: 0.95, stroke: '#e24664', column: 0 },\n  { type: MediconLegendIconType.NotExecuted, size: 0.95, stroke: '#e24664', column: 0 },\n\n  { type: MediconLegendIconType.RateChange, size: 1, stroke: 'black', column: 1 },\n  { type: MediconLegendIconType.DosageDecrease, size: 0.7, stroke: '#2eaafe', column: 1 },\n  { type: MediconLegendIconType.DosageIncrease, size: 1, stroke: '#2eaafe', column: 1 },\n  { type: MediconLegendIconType.Hold, size: 1, stroke: 'black', fill: '#ffd700', column: 1 },\n  { type: MediconLegendIconType.CancelHold, size: 1, stroke: 'black', fill: '#7cfc00', column: 1 },\n  { type: MediconLegendIconType.Stop, size: 1.15, stroke: 'black', column: 1 },\n  { type: MediconLegendIconType.ExecutionTime, size: 0.9, stroke: 'black', column: 1 }\n]"
                }
            ],
            "src/stories/mock-data/mock-data-graph-lines.const.ts": [
                {
                    "name": "mockDataGraphLines",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mock-data/mock-data-graph-lines.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  metadata: {\n    type: GraphType.LinesRegular,\n    height: '600px'\n  },\n  data: {\n    title: {\n      text: 'Lines Graph Example',\n    },\n    legend: {\n      data: ['Email', 'Union Ads', 'Video Ads', 'Direct', 'Search Engine']\n    },\n    xAxis: {\n      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n    },\n    series: {\n      data: [\n        { name: 'Email', data: [120, 132, 101, 134, 90, 230, 210] },\n        { name: 'Union Ads', data: [220, 182, 191, 234, 290, 330, 310] },\n        { name: 'Video Ads', data: [150, 232, 201, 154, 190, 330, 410] },\n        { name: 'Direct', data: [320, 332, 301, 334, 390, 330, 320] },\n        { name: 'Search Engine', data: [820, 932, 901, 934, 1290, 1330, 1320] }\n      ]\n    }\n  }\n}"
                }
            ],
            "src/stories/mock-data/mock-data-graph-pie.const.ts": [
                {
                    "name": "mockDataGraphPie",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/mock-data/mock-data-graph-pie.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  metadata: {\n    type: GraphType.LinesRegular,\n    height: '600px'\n  },\n  data: {\n    title: {\n      text: 'Pie Graph Example'\n    },\n    legend: {\n      data: ['Direct Visit', 'Union Ads', 'Search Engine']\n    },\n    series: {\n      data: [\n        { name: 'Direct Visit', value: 335 },\n        { name: 'Union Ads', value: 234 },\n        { name: 'Search Engine', value: 1548 }\n      ]\n    }\n  }\n}"
                }
            ],
            "src/stories/graphs/lines.stories.ts": [
                {
                    "name": "Regular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/graphs/lines.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphStoryTemplate",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/graphs/lines.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<GraphLinesComponent>",
                    "defaultValue": "(args: GraphLinesComponent) => ({ props: args })"
                }
            ],
            "src/stories/graphs/pie.stories.ts": [
                {
                    "name": "Regular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/graphs/pie.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphStoryTemplate",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/graphs/pie.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<GraphPieComponent>",
                    "defaultValue": "(args: GraphPieComponent) => ({ props: args })"
                }
            ],
            "src/stories/const/text-en.const.ts": [
                {
                    "name": "textEn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/const/text-en.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{\n  direction: 'ltr',\n  text: {\n    buttons: {\n      save: 'Save',\n      cancel: 'cancel',\n      defaultSettings: 'Reset to Default Settings'\n    },\n    pivotTime: {\n      label: 'Pivot time',\n      button: 'Reset Time'\n    },\n    resolution: {\n      label: 'Resolution',\n      options: [\n        { value: '1m', label: '1m' },\n        { value: '2m', label: '2m' },\n        { value: '5m', label: '5m' },\n        { value: '15m', label: '15m' },\n        { value: '30m', label: '30m' },\n        { value: '1h', label: '1h' },\n        { value: '2h', label: '2h' },\n        { value: '4h', label: '4h' },\n        { value: '8h', label: '8h' },\n        { value: '24h', label: '24h' }\n      ]\n    },\n    graphSections: [\n      { title: 'Medications' },\n      { title: 'Operations' },\n      { title: 'Metrics' },\n      { title: 'Table Metrics' }\n    ],\n    medicon: {\n      legend: 'Legend',\n      icons: {\n        [MediconLegendIconType.Order]: 'Order',\n        [MediconLegendIconType.RateChangeOrder]: 'Rate change order',\n        [MediconLegendIconType.Execution]: 'Execution',\n        [MediconLegendIconType.Report]: 'Report',\n        [MediconLegendIconType.NotAdministered]: 'Not Administered',\n        [MediconLegendIconType.NotExecuted]: 'Not Executed',\n        [MediconLegendIconType.RateChange]: 'Rate Change',\n        [MediconLegendIconType.DosageDecrease]: 'Dosage Decrease',\n        [MediconLegendIconType.DosageIncrease]: 'Dosage Increase',\n        [MediconLegendIconType.Hold]: 'Hold',\n        [MediconLegendIconType.CancelHold]: 'Cancel hold',\n        [MediconLegendIconType.Stop]: 'Stop',\n        [MediconLegendIconType.ExecutionTime]: 'planned Execution time'\n      }\n    }\n  }\n} as const"
                }
            ],
            "src/stories/const/text-he.const.ts": [
                {
                    "name": "textHe",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/const/text-he.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "{\n  direction: 'rtl',\n  text: {\n    buttons: {\n      save: 'שמירה',\n      cancel: 'ביטול',\n      defaultSettings: 'איפוס הגדרות'\n    },\n    pivotTime: {\n      label: 'שעת ציר',\n      button: 'זמן נוכחי'\n    },\n    resolution: {\n      label: 'רזולוציה',\n      options: [\n        { value: '1m', label: 'ד1' },\n        { value: '2m', label: '2ד' },\n        { value: '5m', label: '5ד' },\n        { value: '15m', label: '15ד' },\n        { value: '30m', label: '30ד' },\n        { value: '1h', label: 'ש1' },\n        { value: '2h', label: '2ש' },\n        { value: '4h', label: '4ש' },\n        { value: '8h', label: '8ש' },\n        { value: '24h', label: '24ש' }\n      ]\n    },\n    graphSections: [\n      { title: 'תרופות' },\n      { title: 'פעולות' },\n      { title: 'מדדים' },\n      { title: 'מדדים בטבלה' }\n    ],\n    medicon: {\n      legend: 'מקרא',\n      icons: {\n        [MediconLegendIconType.Order]: 'הוראה',\n        [MediconLegendIconType.RateChangeOrder]: 'הוראה לשינוי קצב',\n        [MediconLegendIconType.Execution]: 'ביצוע',\n        [MediconLegendIconType.Report]: 'דיווח',\n        [MediconLegendIconType.NotAdministered]: 'אי מתן',\n        [MediconLegendIconType.NotExecuted]: 'לא בוצע',\n        [MediconLegendIconType.RateChange]: 'שינוי קצב',\n        [MediconLegendIconType.DosageDecrease]: 'הורדת מינון',\n        [MediconLegendIconType.DosageIncrease]: 'העלאת מינון',\n        [MediconLegendIconType.Hold]: 'השהיה',\n        [MediconLegendIconType.CancelHold]: 'ביטול השהיה',\n        [MediconLegendIconType.Stop]: 'עצירה',\n        [MediconLegendIconType.ExecutionTime]: 'מועד ביצוע / החלפת שקית מתוכנן'\n      }\n    }\n  }\n} as const"
                }
            ],
            "src/app/shared/consts/timeline-resolution-values.const.ts": [
                {
                    "name": "TimelineResolutionValues",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/consts/timeline-resolution-values.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  [TimelineResolution.Minutes1]: { minutes: 1, type: TimeDisplayType.Time, softVerticals: 6, interval: 1 },\n  [TimelineResolution.Minutes2]: { minutes: 2, type: TimeDisplayType.Time, softVerticals: 2, interval: 1 },\n  [TimelineResolution.Minutes5]: { minutes: 5, type: TimeDisplayType.Time, softVerticals: 5, interval: 1 },\n  [TimelineResolution.Minutes15]: { minutes: 15, type: TimeDisplayType.Time, softVerticals: 3, interval: 1 },\n  [TimelineResolution.Minutes30]: { minutes: 30, type: TimeDisplayType.Time, softVerticals: 3, interval: 1 },\n  [TimelineResolution.Hours1]: { minutes: 60, type: TimeDisplayType.Time, softVerticals: 6, interval: 1 },\n  [TimelineResolution.Hours2]: { minutes: 120, type: TimeDisplayType.Time, softVerticals: 2, interval: 1 },\n  [TimelineResolution.Hours4]: { minutes: 240, type: TimeDisplayType.DateTime, softVerticals: 4, interval: 2 },\n  [TimelineResolution.Hours8]: { minutes: 480, type: TimeDisplayType.DateTime, softVerticals: 8, interval: 2, fillerColumns: 3 },\n  [TimelineResolution.Hours24]: { minutes: 1440, type: TimeDisplayType.Date, softVerticals: 6, interval: 1, fillerColumns: 5 }\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/stories/enums/execution-type.enum.ts": [
                {
                    "name": "ExecutionType",
                    "childs": [
                        {
                            "name": "Periodic",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Periodic"
                        },
                        {
                            "name": "Continuous",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Continuous"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/stories/enums/execution-type.enum.ts"
                }
            ],
            "src/app/shared/enums/graph-type.enum.ts": [
                {
                    "name": "GraphType",
                    "childs": [
                        {
                            "name": "LinesRegular",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "LinesRegular"
                        },
                        {
                            "name": "PieRegular",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PieRegular"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/graph-type.enum.ts"
                }
            ],
            "src/app/shared/enums/medicon-legend-icon-type.enum.ts": [
                {
                    "name": "MediconLegendIconType",
                    "childs": [
                        {
                            "name": "Order",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Order"
                        },
                        {
                            "name": "Execution",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Execution"
                        },
                        {
                            "name": "RateChangeOrder",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RateChangeOrder"
                        },
                        {
                            "name": "Report",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Report"
                        },
                        {
                            "name": "NotAdministered",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NotAdministered"
                        },
                        {
                            "name": "NotExecuted",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NotExecuted"
                        },
                        {
                            "name": "RateChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "RateChange"
                        },
                        {
                            "name": "DosageDecrease",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DosageDecrease"
                        },
                        {
                            "name": "DosageIncrease",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DosageIncrease"
                        },
                        {
                            "name": "Hold",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Hold"
                        },
                        {
                            "name": "CancelHold",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CancelDelay"
                        },
                        {
                            "name": "Stop",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Stop"
                        },
                        {
                            "name": "ExecutionTime",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ExecutionTime"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/medicon-legend-icon-type.enum.ts"
                }
            ],
            "src/app/shared/enums/medicon-section-type.enum.ts": [
                {
                    "name": "MediconSectionType",
                    "childs": [
                        {
                            "name": "Timeline",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Timeline"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/medicon-section-type.enum.ts"
                }
            ],
            "src/app/shared/enums/time-display-type.enum.ts": [
                {
                    "name": "TimeDisplayType",
                    "childs": [
                        {
                            "name": "Time",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Time"
                        },
                        {
                            "name": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Date"
                        },
                        {
                            "name": "DateTime",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DateTime"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/time-display-type.enum.ts"
                }
            ],
            "src/app/shared/enums/timeline-resolution.enum.ts": [
                {
                    "name": "TimelineResolution",
                    "childs": [
                        {
                            "name": "Minutes1",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1m"
                        },
                        {
                            "name": "Minutes2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "2m"
                        },
                        {
                            "name": "Minutes5",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "5m"
                        },
                        {
                            "name": "Minutes15",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "15m"
                        },
                        {
                            "name": "Minutes30",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "30m"
                        },
                        {
                            "name": "Hours1",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1h"
                        },
                        {
                            "name": "Hours2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "2h"
                        },
                        {
                            "name": "Hours4",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "4h"
                        },
                        {
                            "name": "Hours8",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "8h"
                        },
                        {
                            "name": "Hours24",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "24h"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/enums/timeline-resolution.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/stories/models/direction.model.ts": [
                {
                    "name": "Direction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"rtl\" | \"ltr\"",
                    "file": "src/stories/models/direction.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/shared/base-classes/base-graph.ts": [
                {
                    "name": "EChartsOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "echarts.EChartsOption",
                    "file": "src/app/shared/base-classes/base-graph.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/shared/models/graph-data.model.ts": [
                {
                    "name": "GraphSeriesDataLines",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Array<literal type>",
                    "file": "src/app/shared/models/graph-data.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "GraphSeriesDataPie",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Array<literal type>",
                    "file": "src/app/shared/models/graph-data.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/base-classes/base-graph.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BaseGraph",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/base-classes/base-horizontal-bar.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseHorizontalBar",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/components/graphs/graph-lines.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GraphLinesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/graphs/graph-pie.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GraphPieComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/graphs/graph-timeline-category.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GraphTimelineCategoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/graphs/graph-timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GraphTimelineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/page/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/system/medicon-section-container/medicon-section-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediconSectionContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/system/medicon-section-timeline/medicon-category-item/medicon-category-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediconCategoryItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/system/medicon-section-timeline/medicon-category/medicon-category.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediconCategoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/system/medicon-section-timeline/medicon-execution-continuous/medicon-execution-continuous.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediconExecutionContinuousComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/system/medicon-section-timeline/medicon-execution-periodic/medicon-execution-periodic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediconExecutionPeriodicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/system/medicon-section-timeline/medicon-section-timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediconSectionTimelineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/system/medicon-section-timeline/medicon-timeline-graph/medicon-timeline-graph.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediconTimelineGraphComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/system/medicon/medicon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/system/shared/medicon-icon/medicon-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediconIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/system/shared/medicon-resolution/medicon-resolution.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediconResolutionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/system/shared/medicon-scrollbar/medicon-scrollbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediconScrollbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/system/shared/medicon-timeline-metrics/medicon-timeline-metrics.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediconTimelineMetricsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/system/shared/services/medicon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MediconService",
                "coveragePercent": 8,
                "coverageCount": "2/25",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/consts/medicon-legend-icons.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MediconLegendIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/consts/timeline-resolution-values.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TimelineResolutionValues",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/graph-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/graph-metadata.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphMetadata",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/medicon-server-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MedicationsCategory",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/medicon-server-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MediconSection",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/medicon-server-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MediconServerData",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/medicon-server-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MediconServerTimelineRange",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/timeline-metrics.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MediconTimelineMetrics",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/time.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TimeService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "declarations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exportModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "importModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/medicon-lister-item/medicon-lister-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediconListerItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/medicon-lister/medicon-lister.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediconListerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/medicon-tester/medicon-tester.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediconTesterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/stories/const/default-settings.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultSettings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/const/medication-categories.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MedicationCategories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/const/medications.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "medications",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/const/text-en.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "textEn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/const/text-he.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "textHe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/examples/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/graphs/lines.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Regular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/graphs/lines.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/graphs/medicon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "עברית",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/graphs/medicon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "English",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/graphs/medicon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/graphs/pie.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Regular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/graphs/pie.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mock-data/mock-data-graph-lines.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockDataGraphLines",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/mock-data/mock-data-graph-pie.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockDataGraphPie",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/models/medication.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Medication",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/stories/models/settings.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Settings",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/stories/models/templates/concentrated-display-story-template.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConcentratedDisplayStoryTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/models/templates/graph-story-template.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphStoryTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}